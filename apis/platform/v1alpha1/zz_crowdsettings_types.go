// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CrowdSettingsInitParameters struct {

	// (Boolean) Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default value is false.
	// Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default value is `false`.
	AllowUserToAccessProfile *bool `json:"allowUserToAccessProfile,omitempty" tf:"allow_user_to_access_profile,omitempty"`

	// (String) The application name configured for JPD in Crowd/JIRA.
	// The application name configured for JPD in Crowd/JIRA.
	ApplicationName *string `json:"applicationName,omitempty" tf:"application_name,omitempty"`

	// (Boolean) When set, authenticated users are automatically created in Artifactory. When not set, for every request from a Crowd user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without automatic user creation, you must manually create the user in Artifactory to manage user permissions not attached to their default groups. Default value is true.
	// When set, authenticated users are automatically created in Artifactory. When not set, for every request from a Crowd user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without automatic user creation, you must manually create the user in Artifactory to manage user permissions not attached to their default groups. Default value is `true`.
	AutoUserCreation *bool `json:"autoUserCreation,omitempty" tf:"auto_user_creation,omitempty"`

	// (Boolean) This corresponds to 'Users Management Server' option in Artifactory UI (true = JIRA, false = Crowd). Default value is false.
	// This corresponds to 'Users Management Server' option in Artifactory UI (`true` = JIRA, `false` = Crowd). Default value is `false`.
	DirectAuthentication *bool `json:"directAuthentication,omitempty" tf:"direct_authentication,omitempty"`

	// (Boolean) Use this to enable security integration with Atlassian Crowd or JIRA.
	// Use this to enable security integration with Atlassian Crowd or JIRA.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// (Boolean) When a user logs in with CROWD, only groups retrieved from CROWD will be associated with the user. Default value is false.
	// When a user logs in with CROWD, only groups retrieved from CROWD will be associated with the user. Default value is `false`.
	OverrideAllGroupsUponLogin *bool `json:"overrideAllGroupsUponLogin,omitempty" tf:"override_all_groups_upon_login,omitempty"`

	// (String, Sensitive) The application password configured for JPD in Crowd/JIRA.
	// The application password configured for JPD in Crowd/JIRA.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// (String) The full URL of the server to use.
	// The full URL of the server to use.
	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	// (Number) The time window (min) during which the session does not need to be validated. If set to 0, the token expires only when the session expires.
	// The time window (min) during which the session does not need to be validated. If set to `0`, the token expires only when the session expires.
	SessionValidationInterval *float64 `json:"sessionValidationInterval,omitempty" tf:"session_validation_interval,omitempty"`

	// (Boolean) If a default proxy definition exists, it is used to pass through to the Crowd Server. Default value is false.
	// If a default proxy definition exists, it is used to pass through to the Crowd Server. Default value is `false`.
	UseDefaultProxy *bool `json:"useDefaultProxy,omitempty" tf:"use_default_proxy,omitempty"`
}

type CrowdSettingsObservation struct {

	// (Boolean) Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default value is false.
	// Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default value is `false`.
	AllowUserToAccessProfile *bool `json:"allowUserToAccessProfile,omitempty" tf:"allow_user_to_access_profile,omitempty"`

	// (String) The application name configured for JPD in Crowd/JIRA.
	// The application name configured for JPD in Crowd/JIRA.
	ApplicationName *string `json:"applicationName,omitempty" tf:"application_name,omitempty"`

	// (Boolean) When set, authenticated users are automatically created in Artifactory. When not set, for every request from a Crowd user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without automatic user creation, you must manually create the user in Artifactory to manage user permissions not attached to their default groups. Default value is true.
	// When set, authenticated users are automatically created in Artifactory. When not set, for every request from a Crowd user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without automatic user creation, you must manually create the user in Artifactory to manage user permissions not attached to their default groups. Default value is `true`.
	AutoUserCreation *bool `json:"autoUserCreation,omitempty" tf:"auto_user_creation,omitempty"`

	// (Boolean) This corresponds to 'Users Management Server' option in Artifactory UI (true = JIRA, false = Crowd). Default value is false.
	// This corresponds to 'Users Management Server' option in Artifactory UI (`true` = JIRA, `false` = Crowd). Default value is `false`.
	DirectAuthentication *bool `json:"directAuthentication,omitempty" tf:"direct_authentication,omitempty"`

	// (Boolean) Use this to enable security integration with Atlassian Crowd or JIRA.
	// Use this to enable security integration with Atlassian Crowd or JIRA.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) When a user logs in with CROWD, only groups retrieved from CROWD will be associated with the user. Default value is false.
	// When a user logs in with CROWD, only groups retrieved from CROWD will be associated with the user. Default value is `false`.
	OverrideAllGroupsUponLogin *bool `json:"overrideAllGroupsUponLogin,omitempty" tf:"override_all_groups_upon_login,omitempty"`

	// (String) The full URL of the server to use.
	// The full URL of the server to use.
	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	// (Number) The time window (min) during which the session does not need to be validated. If set to 0, the token expires only when the session expires.
	// The time window (min) during which the session does not need to be validated. If set to `0`, the token expires only when the session expires.
	SessionValidationInterval *float64 `json:"sessionValidationInterval,omitempty" tf:"session_validation_interval,omitempty"`

	// (Boolean) If a default proxy definition exists, it is used to pass through to the Crowd Server. Default value is false.
	// If a default proxy definition exists, it is used to pass through to the Crowd Server. Default value is `false`.
	UseDefaultProxy *bool `json:"useDefaultProxy,omitempty" tf:"use_default_proxy,omitempty"`
}

type CrowdSettingsParameters struct {

	// (Boolean) Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default value is false.
	// Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default value is `false`.
	// +kubebuilder:validation:Optional
	AllowUserToAccessProfile *bool `json:"allowUserToAccessProfile,omitempty" tf:"allow_user_to_access_profile,omitempty"`

	// (String) The application name configured for JPD in Crowd/JIRA.
	// The application name configured for JPD in Crowd/JIRA.
	// +kubebuilder:validation:Optional
	ApplicationName *string `json:"applicationName,omitempty" tf:"application_name,omitempty"`

	// (Boolean) When set, authenticated users are automatically created in Artifactory. When not set, for every request from a Crowd user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without automatic user creation, you must manually create the user in Artifactory to manage user permissions not attached to their default groups. Default value is true.
	// When set, authenticated users are automatically created in Artifactory. When not set, for every request from a Crowd user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without automatic user creation, you must manually create the user in Artifactory to manage user permissions not attached to their default groups. Default value is `true`.
	// +kubebuilder:validation:Optional
	AutoUserCreation *bool `json:"autoUserCreation,omitempty" tf:"auto_user_creation,omitempty"`

	// (Boolean) This corresponds to 'Users Management Server' option in Artifactory UI (true = JIRA, false = Crowd). Default value is false.
	// This corresponds to 'Users Management Server' option in Artifactory UI (`true` = JIRA, `false` = Crowd). Default value is `false`.
	// +kubebuilder:validation:Optional
	DirectAuthentication *bool `json:"directAuthentication,omitempty" tf:"direct_authentication,omitempty"`

	// (Boolean) Use this to enable security integration with Atlassian Crowd or JIRA.
	// Use this to enable security integration with Atlassian Crowd or JIRA.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// (Boolean) When a user logs in with CROWD, only groups retrieved from CROWD will be associated with the user. Default value is false.
	// When a user logs in with CROWD, only groups retrieved from CROWD will be associated with the user. Default value is `false`.
	// +kubebuilder:validation:Optional
	OverrideAllGroupsUponLogin *bool `json:"overrideAllGroupsUponLogin,omitempty" tf:"override_all_groups_upon_login,omitempty"`

	// (String, Sensitive) The application password configured for JPD in Crowd/JIRA.
	// The application password configured for JPD in Crowd/JIRA.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// (String) The full URL of the server to use.
	// The full URL of the server to use.
	// +kubebuilder:validation:Optional
	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	// (Number) The time window (min) during which the session does not need to be validated. If set to 0, the token expires only when the session expires.
	// The time window (min) during which the session does not need to be validated. If set to `0`, the token expires only when the session expires.
	// +kubebuilder:validation:Optional
	SessionValidationInterval *float64 `json:"sessionValidationInterval,omitempty" tf:"session_validation_interval,omitempty"`

	// (Boolean) If a default proxy definition exists, it is used to pass through to the Crowd Server. Default value is false.
	// If a default proxy definition exists, it is used to pass through to the Crowd Server. Default value is `false`.
	// +kubebuilder:validation:Optional
	UseDefaultProxy *bool `json:"useDefaultProxy,omitempty" tf:"use_default_proxy,omitempty"`
}

// CrowdSettingsSpec defines the desired state of CrowdSettings
type CrowdSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CrowdSettingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CrowdSettingsInitParameters `json:"initProvider,omitempty"`
}

// CrowdSettingsStatus defines the observed state of CrowdSettings.
type CrowdSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CrowdSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CrowdSettings is the Schema for the CrowdSettingss API. Provides a JFrog Crowd Settings https://jfrog.com/help/r/jfrog-platform-administration-documentation/atlassian-crowd-and-jira-integration resource. This allows you to delegate authentication requests to Atlassian Crowd/JIRA, use authenticated Crowd/JIRA users and have the JPD participate in a transparent SSO environment managed by Crowd/JIRA.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,jfrog-platform}
type CrowdSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.applicationName) || (has(self.initProvider) && has(self.initProvider.applicationName))",message="spec.forProvider.applicationName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enable) || (has(self.initProvider) && has(self.initProvider.enable))",message="spec.forProvider.enable is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serverUrl) || (has(self.initProvider) && has(self.initProvider.serverUrl))",message="spec.forProvider.serverUrl is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sessionValidationInterval) || (has(self.initProvider) && has(self.initProvider.sessionValidationInterval))",message="spec.forProvider.sessionValidationInterval is a required parameter"
	Spec   CrowdSettingsSpec   `json:"spec"`
	Status CrowdSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CrowdSettingsList contains a list of CrowdSettingss
type CrowdSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CrowdSettings `json:"items"`
}

// Repository type metadata.
var (
	CrowdSettings_Kind             = "CrowdSettings"
	CrowdSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CrowdSettings_Kind}.String()
	CrowdSettings_KindAPIVersion   = CrowdSettings_Kind + "." + CRDGroupVersion.String()
	CrowdSettings_GroupVersionKind = CRDGroupVersion.WithKind(CrowdSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&CrowdSettings{}, &CrowdSettingsList{})
}
