// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type GlobalRoleInitParameters struct {

	// (Set of String) List of actions. Allowed values: READ_REPOSITORY, ANNOTATE_REPOSITORY, DEPLOY_CACHE_REPOSITORY, DELETE_OVERWRITE_REPOSITORY, MANAGE_XRAY_MD_REPOSITORY, READ_RELEASE_BUNDLE, ANNOTATE_RELEASE_BUNDLE, CREATE_RELEASE_BUNDLE, DISTRIBUTE_RELEASE_BUNDLE, DELETE_RELEASE_BUNDLE, MANAGE_XRAY_MD_RELEASE_BUNDLE, READ_BUILD, ANNOTATE_BUILD, DEPLOY_BUILD, DELETE_BUILD, MANAGE_XRAY_MD_BUILD, READ_SOURCES_PIPELINE, TRIGGER_PIPELINE, READ_INTEGRATIONS_PIPELINE, READ_POOLS_PIPELINE, REPORTS_SECURITY, WATCHES_SECURITY, POLICIES_SECURITY, RULES_SECURITY, READ_POLICIES_SECURITY
	// List of actions. Allowed values: READ_REPOSITORY, ANNOTATE_REPOSITORY, DEPLOY_CACHE_REPOSITORY, DELETE_OVERWRITE_REPOSITORY, MANAGE_XRAY_MD_REPOSITORY, READ_RELEASE_BUNDLE, ANNOTATE_RELEASE_BUNDLE, CREATE_RELEASE_BUNDLE, DISTRIBUTE_RELEASE_BUNDLE, DELETE_RELEASE_BUNDLE, MANAGE_XRAY_MD_RELEASE_BUNDLE, READ_BUILD, ANNOTATE_BUILD, DEPLOY_BUILD, DELETE_BUILD, MANAGE_XRAY_MD_BUILD, READ_SOURCES_PIPELINE, TRIGGER_PIPELINE, READ_INTEGRATIONS_PIPELINE, READ_POOLS_PIPELINE, REPORTS_SECURITY, WATCHES_SECURITY, POLICIES_SECURITY, RULES_SECURITY, READ_POLICIES_SECURITY
	// +listType=set
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (String) Description of the role
	// Description of the role
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Set of String) List of global or custom environments. A repository can be available in different environments. Members with roles defined in the set environment will have access to the repository.
	// List of global or custom environments. A repository can be available in different environments. Members with roles defined in the set environment will have access to the repository.
	// +listType=set
	Environments []*string `json:"environments,omitempty" tf:"environments,omitempty"`

	// (String) Name of the role
	// Name of the role
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the role. Allowed values: ADMIN, CUSTOM_GLOBAL, PREDEFINED
	// Type of the role. Allowed values: ADMIN, CUSTOM_GLOBAL, PREDEFINED
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GlobalRoleObservation struct {

	// (Set of String) List of actions. Allowed values: READ_REPOSITORY, ANNOTATE_REPOSITORY, DEPLOY_CACHE_REPOSITORY, DELETE_OVERWRITE_REPOSITORY, MANAGE_XRAY_MD_REPOSITORY, READ_RELEASE_BUNDLE, ANNOTATE_RELEASE_BUNDLE, CREATE_RELEASE_BUNDLE, DISTRIBUTE_RELEASE_BUNDLE, DELETE_RELEASE_BUNDLE, MANAGE_XRAY_MD_RELEASE_BUNDLE, READ_BUILD, ANNOTATE_BUILD, DEPLOY_BUILD, DELETE_BUILD, MANAGE_XRAY_MD_BUILD, READ_SOURCES_PIPELINE, TRIGGER_PIPELINE, READ_INTEGRATIONS_PIPELINE, READ_POOLS_PIPELINE, REPORTS_SECURITY, WATCHES_SECURITY, POLICIES_SECURITY, RULES_SECURITY, READ_POLICIES_SECURITY
	// List of actions. Allowed values: READ_REPOSITORY, ANNOTATE_REPOSITORY, DEPLOY_CACHE_REPOSITORY, DELETE_OVERWRITE_REPOSITORY, MANAGE_XRAY_MD_REPOSITORY, READ_RELEASE_BUNDLE, ANNOTATE_RELEASE_BUNDLE, CREATE_RELEASE_BUNDLE, DISTRIBUTE_RELEASE_BUNDLE, DELETE_RELEASE_BUNDLE, MANAGE_XRAY_MD_RELEASE_BUNDLE, READ_BUILD, ANNOTATE_BUILD, DEPLOY_BUILD, DELETE_BUILD, MANAGE_XRAY_MD_BUILD, READ_SOURCES_PIPELINE, TRIGGER_PIPELINE, READ_INTEGRATIONS_PIPELINE, READ_POOLS_PIPELINE, REPORTS_SECURITY, WATCHES_SECURITY, POLICIES_SECURITY, RULES_SECURITY, READ_POLICIES_SECURITY
	// +listType=set
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (String) Description of the role
	// Description of the role
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Set of String) List of global or custom environments. A repository can be available in different environments. Members with roles defined in the set environment will have access to the repository.
	// List of global or custom environments. A repository can be available in different environments. Members with roles defined in the set environment will have access to the repository.
	// +listType=set
	Environments []*string `json:"environments,omitempty" tf:"environments,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the role
	// Name of the role
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the role. Allowed values: ADMIN, CUSTOM_GLOBAL, PREDEFINED
	// Type of the role. Allowed values: ADMIN, CUSTOM_GLOBAL, PREDEFINED
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GlobalRoleParameters struct {

	// (Set of String) List of actions. Allowed values: READ_REPOSITORY, ANNOTATE_REPOSITORY, DEPLOY_CACHE_REPOSITORY, DELETE_OVERWRITE_REPOSITORY, MANAGE_XRAY_MD_REPOSITORY, READ_RELEASE_BUNDLE, ANNOTATE_RELEASE_BUNDLE, CREATE_RELEASE_BUNDLE, DISTRIBUTE_RELEASE_BUNDLE, DELETE_RELEASE_BUNDLE, MANAGE_XRAY_MD_RELEASE_BUNDLE, READ_BUILD, ANNOTATE_BUILD, DEPLOY_BUILD, DELETE_BUILD, MANAGE_XRAY_MD_BUILD, READ_SOURCES_PIPELINE, TRIGGER_PIPELINE, READ_INTEGRATIONS_PIPELINE, READ_POOLS_PIPELINE, REPORTS_SECURITY, WATCHES_SECURITY, POLICIES_SECURITY, RULES_SECURITY, READ_POLICIES_SECURITY
	// List of actions. Allowed values: READ_REPOSITORY, ANNOTATE_REPOSITORY, DEPLOY_CACHE_REPOSITORY, DELETE_OVERWRITE_REPOSITORY, MANAGE_XRAY_MD_REPOSITORY, READ_RELEASE_BUNDLE, ANNOTATE_RELEASE_BUNDLE, CREATE_RELEASE_BUNDLE, DISTRIBUTE_RELEASE_BUNDLE, DELETE_RELEASE_BUNDLE, MANAGE_XRAY_MD_RELEASE_BUNDLE, READ_BUILD, ANNOTATE_BUILD, DEPLOY_BUILD, DELETE_BUILD, MANAGE_XRAY_MD_BUILD, READ_SOURCES_PIPELINE, TRIGGER_PIPELINE, READ_INTEGRATIONS_PIPELINE, READ_POOLS_PIPELINE, REPORTS_SECURITY, WATCHES_SECURITY, POLICIES_SECURITY, RULES_SECURITY, READ_POLICIES_SECURITY
	// +kubebuilder:validation:Optional
	// +listType=set
	Actions []*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (String) Description of the role
	// Description of the role
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Set of String) List of global or custom environments. A repository can be available in different environments. Members with roles defined in the set environment will have access to the repository.
	// List of global or custom environments. A repository can be available in different environments. Members with roles defined in the set environment will have access to the repository.
	// +kubebuilder:validation:Optional
	// +listType=set
	Environments []*string `json:"environments,omitempty" tf:"environments,omitempty"`

	// (String) Name of the role
	// Name of the role
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the role. Allowed values: ADMIN, CUSTOM_GLOBAL, PREDEFINED
	// Type of the role. Allowed values: ADMIN, CUSTOM_GLOBAL, PREDEFINED
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// GlobalRoleSpec defines the desired state of GlobalRole
type GlobalRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GlobalRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GlobalRoleInitParameters `json:"initProvider,omitempty"`
}

// GlobalRoleStatus defines the observed state of GlobalRole.
type GlobalRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GlobalRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GlobalRole is the Schema for the GlobalRoles API. Provides a JFrog global role https://jfrog.com/help/r/jfrog-platform-administration-documentation/global-and-project-role-types resource to manage custom global roles.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,jfrog-platform}
type GlobalRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.actions) || (has(self.initProvider) && has(self.initProvider.actions))",message="spec.forProvider.actions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.environments) || (has(self.initProvider) && has(self.initProvider.environments))",message="spec.forProvider.environments is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   GlobalRoleSpec   `json:"spec"`
	Status GlobalRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalRoleList contains a list of GlobalRoles
type GlobalRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlobalRole `json:"items"`
}

// Repository type metadata.
var (
	GlobalRole_Kind             = "GlobalRole"
	GlobalRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GlobalRole_Kind}.String()
	GlobalRole_KindAPIVersion   = GlobalRole_Kind + "." + CRDGroupVersion.String()
	GlobalRole_GroupVersionKind = CRDGroupVersion.WithKind(GlobalRole_Kind)
)

func init() {
	SchemeBuilder.Register(&GlobalRole{}, &GlobalRoleList{})
}
