// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type AWSIAMRoleInitParameters struct {

	// ]+$"
	// The AWS IAM role. Must follow the regex, "^arn:aws:iam::\d{12}:role/[\w+=,.@:-]+$"
	IAMRole *string `json:"iamRole,omitempty" tf:"iam_role,omitempty"`

	// (String) The JFrog Platform user name.
	// The JFrog Platform user name.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AWSIAMRoleObservation struct {

	// ]+$"
	// The AWS IAM role. Must follow the regex, "^arn:aws:iam::\d{12}:role/[\w+=,.@:-]+$"
	IAMRole *string `json:"iamRole,omitempty" tf:"iam_role,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The JFrog Platform user name.
	// The JFrog Platform user name.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AWSIAMRoleParameters struct {

	// ]+$"
	// The AWS IAM role. Must follow the regex, "^arn:aws:iam::\d{12}:role/[\w+=,.@:-]+$"
	// +kubebuilder:validation:Optional
	IAMRole *string `json:"iamRole,omitempty" tf:"iam_role,omitempty"`

	// (String) The JFrog Platform user name.
	// The JFrog Platform user name.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// AWSIAMRoleSpec defines the desired state of AWSIAMRole
type AWSIAMRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AWSIAMRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AWSIAMRoleInitParameters `json:"initProvider,omitempty"`
}

// AWSIAMRoleStatus defines the observed state of AWSIAMRole.
type AWSIAMRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AWSIAMRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AWSIAMRole is the Schema for the AWSIAMRoles API. Provides a resource to manage AWS IAM roles for JFrog platform users. You can use the AWS IAM roles for passwordless access to Amazon EKS. For more information, see Passwordless Access for Amazon EKS https://jfrog.com/help/r/jfrog-installation-setup-documentation/passwordless-access-for-amazon-eks. ->Only available for Artifactory 7.90.10 or later.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,jfrog-platform}
type AWSIAMRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.iamRole) || (has(self.initProvider) && has(self.initProvider.iamRole))",message="spec.forProvider.iamRole is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.username) || (has(self.initProvider) && has(self.initProvider.username))",message="spec.forProvider.username is a required parameter"
	Spec   AWSIAMRoleSpec   `json:"spec"`
	Status AWSIAMRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AWSIAMRoleList contains a list of AWSIAMRoles
type AWSIAMRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AWSIAMRole `json:"items"`
}

// Repository type metadata.
var (
	AWSIAMRole_Kind             = "AWSIAMRole"
	AWSIAMRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AWSIAMRole_Kind}.String()
	AWSIAMRole_KindAPIVersion   = AWSIAMRole_Kind + "." + CRDGroupVersion.String()
	AWSIAMRole_GroupVersionKind = CRDGroupVersion.WithKind(AWSIAMRole_Kind)
)

func init() {
	SchemeBuilder.Register(&AWSIAMRole{}, &AWSIAMRoleList{})
}
