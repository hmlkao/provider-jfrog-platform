// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ArtifactFilterCriteriaInitParameters struct {

	// (Set of String) Define patterns to for all repository paths for repositories to be excluded in the repoKeys. Defines those repositories that do not trigger the worker.
	// Define patterns to for all repository paths for repositories to be excluded in the repoKeys. Defines those repositories that do not trigger the worker.
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// (Set of String) Define patterns to match all repository paths for repositories identified in the repoKeys. Defines those repositories that trigger the worker.
	// Define patterns to match all repository paths for repositories identified in the repoKeys. Defines those repositories that trigger the worker.
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (Set of String) Defines which repositories are used when an action event occurs to trigger the worker.
	// Defines which repositories are used when an action event occurs to trigger the worker.
	// +listType=set
	RepoKeys []*string `json:"repoKeys,omitempty" tf:"repo_keys,omitempty"`
}

type ArtifactFilterCriteriaObservation struct {

	// (Set of String) Define patterns to for all repository paths for repositories to be excluded in the repoKeys. Defines those repositories that do not trigger the worker.
	// Define patterns to for all repository paths for repositories to be excluded in the repoKeys. Defines those repositories that do not trigger the worker.
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// (Set of String) Define patterns to match all repository paths for repositories identified in the repoKeys. Defines those repositories that trigger the worker.
	// Define patterns to match all repository paths for repositories identified in the repoKeys. Defines those repositories that trigger the worker.
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (Set of String) Defines which repositories are used when an action event occurs to trigger the worker.
	// Defines which repositories are used when an action event occurs to trigger the worker.
	// +listType=set
	RepoKeys []*string `json:"repoKeys,omitempty" tf:"repo_keys,omitempty"`
}

type ArtifactFilterCriteriaParameters struct {

	// (Set of String) Define patterns to for all repository paths for repositories to be excluded in the repoKeys. Defines those repositories that do not trigger the worker.
	// Define patterns to for all repository paths for repositories to be excluded in the repoKeys. Defines those repositories that do not trigger the worker.
	// +kubebuilder:validation:Optional
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// (Set of String) Define patterns to match all repository paths for repositories identified in the repoKeys. Defines those repositories that trigger the worker.
	// Define patterns to match all repository paths for repositories identified in the repoKeys. Defines those repositories that trigger the worker.
	// +kubebuilder:validation:Optional
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (Set of String) Defines which repositories are used when an action event occurs to trigger the worker.
	// Defines which repositories are used when an action event occurs to trigger the worker.
	// +kubebuilder:validation:Optional
	// +listType=set
	RepoKeys []*string `json:"repoKeys" tf:"repo_keys,omitempty"`
}

type FilterCriteriaInitParameters struct {

	// (Attributes) (see below for nested schema)
	ArtifactFilterCriteria *ArtifactFilterCriteriaInitParameters `json:"artifactFilterCriteria,omitempty" tf:"artifact_filter_criteria,omitempty"`
}

type FilterCriteriaObservation struct {

	// (Attributes) (see below for nested schema)
	ArtifactFilterCriteria *ArtifactFilterCriteriaObservation `json:"artifactFilterCriteria,omitempty" tf:"artifact_filter_criteria,omitempty"`
}

type FilterCriteriaParameters struct {

	// (Attributes) (see below for nested schema)
	// +kubebuilder:validation:Optional
	ArtifactFilterCriteria *ArtifactFilterCriteriaParameters `json:"artifactFilterCriteria" tf:"artifact_filter_criteria,omitempty"`
}

type SecretsInitParameters struct {

	// (String) The unique ID of the worker.
	// The name of the secret.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The name of the secret.
	// The name of the secret.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SecretsObservation struct {

	// (String) The unique ID of the worker.
	// The name of the secret.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The name of the secret.
	// The name of the secret.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SecretsParameters struct {

	// (String) The unique ID of the worker.
	// The name of the secret.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The name of the secret.
	// The name of the secret.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type WorkersServiceInitParameters struct {

	// (String) The worker action with which the worker is associated. Valid values: BEFORE_DOWNLOAD, AFTER_DOWNLOAD, BEFORE_UPLOAD, AFTER_CREATE, AFTER_BUILD_INFO_SAVE, AFTER_MOVE, BEFORE_PROPERTY_CREATE, BEFORE_PROPERTY_DELETE, AFTER_PROPERTY_CREATE, AFTER_PROPERTY_DELETE
	// The worker action with which the worker is associated. Valid values: BEFORE_DOWNLOAD, AFTER_DOWNLOAD, BEFORE_UPLOAD, AFTER_CREATE, AFTER_BUILD_INFO_SAVE, AFTER_MOVE, BEFORE_PROPERTY_CREATE, BEFORE_PROPERTY_DELETE, AFTER_PROPERTY_CREATE, AFTER_PROPERTY_DELETE
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) Description of the worker.
	// Description of the worker.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether to enable the worker immediately after creation.
	// Whether to enable the worker immediately after creation.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) Defines the repositories to be used or excluded. (see below for nested schema)
	FilterCriteria *FilterCriteriaInitParameters `json:"filterCriteria,omitempty" tf:"filter_criteria,omitempty"`

	// (String) The unique ID of the worker.
	// The unique ID of the worker.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Attributes Set) The secrets to be added to the worker. (see below for nested schema)
	Secrets []SecretsInitParameters `json:"secrets,omitempty" tf:"secrets,omitempty"`

	// (String) The worker script in TypeScript or JavaScript.
	// The worker script in TypeScript or JavaScript.
	SourceCode *string `json:"sourceCode,omitempty" tf:"source_code,omitempty"`
}

type WorkersServiceObservation struct {

	// (String) The worker action with which the worker is associated. Valid values: BEFORE_DOWNLOAD, AFTER_DOWNLOAD, BEFORE_UPLOAD, AFTER_CREATE, AFTER_BUILD_INFO_SAVE, AFTER_MOVE, BEFORE_PROPERTY_CREATE, BEFORE_PROPERTY_DELETE, AFTER_PROPERTY_CREATE, AFTER_PROPERTY_DELETE
	// The worker action with which the worker is associated. Valid values: BEFORE_DOWNLOAD, AFTER_DOWNLOAD, BEFORE_UPLOAD, AFTER_CREATE, AFTER_BUILD_INFO_SAVE, AFTER_MOVE, BEFORE_PROPERTY_CREATE, BEFORE_PROPERTY_DELETE, AFTER_PROPERTY_CREATE, AFTER_PROPERTY_DELETE
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) Description of the worker.
	// Description of the worker.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether to enable the worker immediately after creation.
	// Whether to enable the worker immediately after creation.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) Defines the repositories to be used or excluded. (see below for nested schema)
	FilterCriteria *FilterCriteriaObservation `json:"filterCriteria,omitempty" tf:"filter_criteria,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The unique ID of the worker.
	// The unique ID of the worker.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Attributes Set) The secrets to be added to the worker. (see below for nested schema)
	Secrets []SecretsObservation `json:"secrets,omitempty" tf:"secrets,omitempty"`

	// (String) The worker script in TypeScript or JavaScript.
	// The worker script in TypeScript or JavaScript.
	SourceCode *string `json:"sourceCode,omitempty" tf:"source_code,omitempty"`
}

type WorkersServiceParameters struct {

	// (String) The worker action with which the worker is associated. Valid values: BEFORE_DOWNLOAD, AFTER_DOWNLOAD, BEFORE_UPLOAD, AFTER_CREATE, AFTER_BUILD_INFO_SAVE, AFTER_MOVE, BEFORE_PROPERTY_CREATE, BEFORE_PROPERTY_DELETE, AFTER_PROPERTY_CREATE, AFTER_PROPERTY_DELETE
	// The worker action with which the worker is associated. Valid values: BEFORE_DOWNLOAD, AFTER_DOWNLOAD, BEFORE_UPLOAD, AFTER_CREATE, AFTER_BUILD_INFO_SAVE, AFTER_MOVE, BEFORE_PROPERTY_CREATE, BEFORE_PROPERTY_DELETE, AFTER_PROPERTY_CREATE, AFTER_PROPERTY_DELETE
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (String) Description of the worker.
	// Description of the worker.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Whether to enable the worker immediately after creation.
	// Whether to enable the worker immediately after creation.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Attributes) Defines the repositories to be used or excluded. (see below for nested schema)
	// +kubebuilder:validation:Optional
	FilterCriteria *FilterCriteriaParameters `json:"filterCriteria,omitempty" tf:"filter_criteria,omitempty"`

	// (String) The unique ID of the worker.
	// The unique ID of the worker.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Attributes Set) The secrets to be added to the worker. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Secrets []SecretsParameters `json:"secrets,omitempty" tf:"secrets,omitempty"`

	// (String) The worker script in TypeScript or JavaScript.
	// The worker script in TypeScript or JavaScript.
	// +kubebuilder:validation:Optional
	SourceCode *string `json:"sourceCode,omitempty" tf:"source_code,omitempty"`
}

// WorkersServiceSpec defines the desired state of WorkersService
type WorkersServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkersServiceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WorkersServiceInitParameters `json:"initProvider,omitempty"`
}

// WorkersServiceStatus defines the observed state of WorkersService.
type WorkersServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkersServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// WorkersService is the Schema for the WorkersServices API. Provides a JFrog Workers Service https://jfrog.com/help/r/jfrog-platform-administration-documentation/workers-service resource. This can be used to create and manage Workers Service. ->From Artifactory 7.94 the Workers service will be available in a general availability release to Enterprise X and Enterprise+ licenses.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,jfrog-platform}
type WorkersService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.filterCriteria) || (has(self.initProvider) && has(self.initProvider.filterCriteria))",message="spec.forProvider.filterCriteria is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceCode) || (has(self.initProvider) && has(self.initProvider.sourceCode))",message="spec.forProvider.sourceCode is a required parameter"
	Spec   WorkersServiceSpec   `json:"spec"`
	Status WorkersServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkersServiceList contains a list of WorkersServices
type WorkersServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkersService `json:"items"`
}

// Repository type metadata.
var (
	WorkersService_Kind             = "WorkersService"
	WorkersService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WorkersService_Kind}.String()
	WorkersService_KindAPIVersion   = WorkersService_Kind + "." + CRDGroupVersion.String()
	WorkersService_GroupVersionKind = CRDGroupVersion.WithKind(WorkersService_Kind)
)

func init() {
	SchemeBuilder.Register(&WorkersService{}, &WorkersServiceList{})
}
