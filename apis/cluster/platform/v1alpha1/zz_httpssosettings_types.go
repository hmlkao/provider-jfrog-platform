// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type HTTPSSOSettingsInitParameters struct {

	// (Boolean) Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default to false.
	// Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default to `false`.
	AllowUserToAccessProfile *bool `json:"allowUserToAccessProfile,omitempty" tf:"allow_user_to_access_profile,omitempty"`

	// (Boolean) When set, authenticated users are automatically created in Artifactory. When not set, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without automatic user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default to false.
	// When set, authenticated users are automatically created in Artifactory. When not set, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without automatic user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default to `false`.
	AutoCreateUser *bool `json:"autoCreateUser,omitempty" tf:"auto_create_user,omitempty"`

	// (Boolean) When set, Artifactory trusts incoming requests and reuses the remote user originally set on the request by the SSO of the HTTP server. This is useful if you want to use existing enterprise SSO integrations, such as the powerful authentication schemes provided by Apache (mod_auth_ldap, mod_auth_ntlm, mod_auth_kerb, etc.). When Artifactory is deployed as a webapp on Tomcat behind Apache: If using mod_jk, be sure to use the JkEnvVar REMOTE_USER directive in Apache's configuration.
	// When set, Artifactory trusts incoming requests and reuses the remote user originally set on the request by the SSO of the HTTP server. This is useful if you want to use existing enterprise SSO integrations, such as the powerful authentication schemes provided by Apache (mod_auth_ldap, mod_auth_ntlm, mod_auth_kerb, etc.). When Artifactory is deployed as a webapp on Tomcat behind Apache: If using mod_jk, be sure to use the `JkEnvVar REMOTE_USER` directive in Apache's configuration.
	Proxied *bool `json:"proxied,omitempty" tf:"proxied,omitempty"`

	// (String) The name of the HTTP request variable to use for extracting the user identity. Default to REMOTE_USER.
	// The name of the HTTP request variable to use for extracting the user identity. Default to `REMOTE_USER`.
	RemoteUserRequestVariable *string `json:"remoteUserRequestVariable,omitempty" tf:"remote_user_request_variable,omitempty"`

	// (Boolean) When set, the user will be associated with the groups returned in the LDAP login response. Note that the user's association with the returned groups is persistent if the auto_create_user is set. Default to false.
	// When set, the user will be associated with the groups returned in the LDAP login response. Note that the user's association with the returned groups is persistent if the `auto_create_user` is set. Default to `false`.
	SyncLdapGroups *bool `json:"syncLdapGroups,omitempty" tf:"sync_ldap_groups,omitempty"`
}

type HTTPSSOSettingsObservation struct {

	// (Boolean) Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default to false.
	// Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default to `false`.
	AllowUserToAccessProfile *bool `json:"allowUserToAccessProfile,omitempty" tf:"allow_user_to_access_profile,omitempty"`

	// (Boolean) When set, authenticated users are automatically created in Artifactory. When not set, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without automatic user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default to false.
	// When set, authenticated users are automatically created in Artifactory. When not set, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without automatic user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default to `false`.
	AutoCreateUser *bool `json:"autoCreateUser,omitempty" tf:"auto_create_user,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) When set, Artifactory trusts incoming requests and reuses the remote user originally set on the request by the SSO of the HTTP server. This is useful if you want to use existing enterprise SSO integrations, such as the powerful authentication schemes provided by Apache (mod_auth_ldap, mod_auth_ntlm, mod_auth_kerb, etc.). When Artifactory is deployed as a webapp on Tomcat behind Apache: If using mod_jk, be sure to use the JkEnvVar REMOTE_USER directive in Apache's configuration.
	// When set, Artifactory trusts incoming requests and reuses the remote user originally set on the request by the SSO of the HTTP server. This is useful if you want to use existing enterprise SSO integrations, such as the powerful authentication schemes provided by Apache (mod_auth_ldap, mod_auth_ntlm, mod_auth_kerb, etc.). When Artifactory is deployed as a webapp on Tomcat behind Apache: If using mod_jk, be sure to use the `JkEnvVar REMOTE_USER` directive in Apache's configuration.
	Proxied *bool `json:"proxied,omitempty" tf:"proxied,omitempty"`

	// (String) The name of the HTTP request variable to use for extracting the user identity. Default to REMOTE_USER.
	// The name of the HTTP request variable to use for extracting the user identity. Default to `REMOTE_USER`.
	RemoteUserRequestVariable *string `json:"remoteUserRequestVariable,omitempty" tf:"remote_user_request_variable,omitempty"`

	// (Boolean) When set, the user will be associated with the groups returned in the LDAP login response. Note that the user's association with the returned groups is persistent if the auto_create_user is set. Default to false.
	// When set, the user will be associated with the groups returned in the LDAP login response. Note that the user's association with the returned groups is persistent if the `auto_create_user` is set. Default to `false`.
	SyncLdapGroups *bool `json:"syncLdapGroups,omitempty" tf:"sync_ldap_groups,omitempty"`
}

type HTTPSSOSettingsParameters struct {

	// (Boolean) Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default to false.
	// Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default to `false`.
	// +kubebuilder:validation:Optional
	AllowUserToAccessProfile *bool `json:"allowUserToAccessProfile,omitempty" tf:"allow_user_to_access_profile,omitempty"`

	// (Boolean) When set, authenticated users are automatically created in Artifactory. When not set, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without automatic user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default to false.
	// When set, authenticated users are automatically created in Artifactory. When not set, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without automatic user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default to `false`.
	// +kubebuilder:validation:Optional
	AutoCreateUser *bool `json:"autoCreateUser,omitempty" tf:"auto_create_user,omitempty"`

	// (Boolean) When set, Artifactory trusts incoming requests and reuses the remote user originally set on the request by the SSO of the HTTP server. This is useful if you want to use existing enterprise SSO integrations, such as the powerful authentication schemes provided by Apache (mod_auth_ldap, mod_auth_ntlm, mod_auth_kerb, etc.). When Artifactory is deployed as a webapp on Tomcat behind Apache: If using mod_jk, be sure to use the JkEnvVar REMOTE_USER directive in Apache's configuration.
	// When set, Artifactory trusts incoming requests and reuses the remote user originally set on the request by the SSO of the HTTP server. This is useful if you want to use existing enterprise SSO integrations, such as the powerful authentication schemes provided by Apache (mod_auth_ldap, mod_auth_ntlm, mod_auth_kerb, etc.). When Artifactory is deployed as a webapp on Tomcat behind Apache: If using mod_jk, be sure to use the `JkEnvVar REMOTE_USER` directive in Apache's configuration.
	// +kubebuilder:validation:Optional
	Proxied *bool `json:"proxied,omitempty" tf:"proxied,omitempty"`

	// (String) The name of the HTTP request variable to use for extracting the user identity. Default to REMOTE_USER.
	// The name of the HTTP request variable to use for extracting the user identity. Default to `REMOTE_USER`.
	// +kubebuilder:validation:Optional
	RemoteUserRequestVariable *string `json:"remoteUserRequestVariable,omitempty" tf:"remote_user_request_variable,omitempty"`

	// (Boolean) When set, the user will be associated with the groups returned in the LDAP login response. Note that the user's association with the returned groups is persistent if the auto_create_user is set. Default to false.
	// When set, the user will be associated with the groups returned in the LDAP login response. Note that the user's association with the returned groups is persistent if the `auto_create_user` is set. Default to `false`.
	// +kubebuilder:validation:Optional
	SyncLdapGroups *bool `json:"syncLdapGroups,omitempty" tf:"sync_ldap_groups,omitempty"`
}

// HTTPSSOSettingsSpec defines the desired state of HTTPSSOSettings
type HTTPSSOSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HTTPSSOSettingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HTTPSSOSettingsInitParameters `json:"initProvider,omitempty"`
}

// HTTPSSOSettingsStatus defines the observed state of HTTPSSOSettings.
type HTTPSSOSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HTTPSSOSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HTTPSSOSettings is the Schema for the HTTPSSOSettingss API. Provides a JFrog HTTP SSO Settings https://jfrog.com/help/r/jfrog-platform-administration-documentation/http-sso resource. This allows you to reuse existing HTTP-based SSO infrastructures with the JFrog Platform Unit (JPD), such as the SSO modules offered by Apache HTTPd.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,jfrog-platform}
type HTTPSSOSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.proxied) || (has(self.initProvider) && has(self.initProvider.proxied))",message="spec.forProvider.proxied is a required parameter"
	Spec   HTTPSSOSettingsSpec   `json:"spec"`
	Status HTTPSSOSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HTTPSSOSettingsList contains a list of HTTPSSOSettingss
type HTTPSSOSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HTTPSSOSettings `json:"items"`
}

// Repository type metadata.
var (
	HTTPSSOSettings_Kind             = "HTTPSSOSettings"
	HTTPSSOSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HTTPSSOSettings_Kind}.String()
	HTTPSSOSettings_KindAPIVersion   = HTTPSSOSettings_Kind + "." + CRDGroupVersion.String()
	HTTPSSOSettings_GroupVersionKind = CRDGroupVersion.WithKind(HTTPSSOSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&HTTPSSOSettings{}, &HTTPSSOSettingsList{})
}
