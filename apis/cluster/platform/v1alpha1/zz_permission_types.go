// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ActionsGroupsInitParameters struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: View and downloads build info artifacts from the artifactory-build-info default repository and reads the corresponding build in the Builds page.
	// **ANNOTATE**: Annotates build info artifacts and folders with metadata and properties.
	// **WRITE**: Allows uploading and promoting build info artifacts.
	// **DELETE**: Deletes build info artifacts.
	// **SCAN**: Triggers Xray scans on builds. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing build info permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type ActionsGroupsObservation struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: View and downloads build info artifacts from the artifactory-build-info default repository and reads the corresponding build in the Builds page.
	// **ANNOTATE**: Annotates build info artifacts and folders with metadata and properties.
	// **WRITE**: Allows uploading and promoting build info artifacts.
	// **DELETE**: Deletes build info artifacts.
	// **SCAN**: Triggers Xray scans on builds. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing build info permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type ActionsGroupsParameters struct {

	// (String) Permission name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: View and downloads build info artifacts from the artifactory-build-info default repository and reads the corresponding build in the Builds page.
	// **ANNOTATE**: Annotates build info artifacts and folders with metadata and properties.
	// **WRITE**: Allows uploading and promoting build info artifacts.
	// **DELETE**: Deletes build info artifacts.
	// **SCAN**: Triggers Xray scans on builds. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing build info permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type ActionsInitParameters struct {

	// (Attributes Set) (see below for nested schema)
	Groups []GroupsInitParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Users []UsersInitParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type ActionsObservation struct {

	// (Attributes Set) (see below for nested schema)
	Groups []GroupsObservation `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Users []UsersObservation `json:"users,omitempty" tf:"users,omitempty"`
}

type ActionsParameters struct {

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Groups []GroupsParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Users []UsersParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type ActionsUsersInitParameters struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: View and downloads build info artifacts from the artifactory-build-info default repository and reads the corresponding build in the Builds page.
	// **ANNOTATE**: Annotates build info artifacts and folders with metadata and properties.
	// **WRITE**: Allows uploading and promoting build info artifacts.
	// **DELETE**: Deletes build info artifacts.
	// **SCAN**: Triggers Xray scans on builds. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing build info permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type ActionsUsersObservation struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: View and downloads build info artifacts from the artifactory-build-info default repository and reads the corresponding build in the Builds page.
	// **ANNOTATE**: Annotates build info artifacts and folders with metadata and properties.
	// **WRITE**: Allows uploading and promoting build info artifacts.
	// **DELETE**: Deletes build info artifacts.
	// **SCAN**: Triggers Xray scans on builds. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing build info permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type ActionsUsersParameters struct {

	// (String) Permission name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: View and downloads build info artifacts from the artifactory-build-info default repository and reads the corresponding build in the Builds page.
	// **ANNOTATE**: Annotates build info artifacts and folders with metadata and properties.
	// **WRITE**: Allows uploading and promoting build info artifacts.
	// **DELETE**: Deletes build info artifacts.
	// **SCAN**: Triggers Xray scans on builds. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing build info permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type ArtifactInitParameters struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	Actions *ActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Targets []TargetsInitParameters `json:"targets,omitempty" tf:"targets,omitempty"`
}

type ArtifactObservation struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	Actions *ActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Targets []TargetsObservation `json:"targets,omitempty" tf:"targets,omitempty"`
}

type ArtifactParameters struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Actions *ActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Targets []TargetsParameters `json:"targets" tf:"targets,omitempty"`
}

type BuildActionsInitParameters struct {

	// (Attributes Set) (see below for nested schema)
	Groups []ActionsGroupsInitParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Users []ActionsUsersInitParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type BuildActionsObservation struct {

	// (Attributes Set) (see below for nested schema)
	Groups []ActionsGroupsObservation `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Users []ActionsUsersObservation `json:"users,omitempty" tf:"users,omitempty"`
}

type BuildActionsParameters struct {

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Groups []ActionsGroupsParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Users []ActionsUsersParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type BuildInitParameters struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	Actions *BuildActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Targets []BuildTargetsInitParameters `json:"targets,omitempty" tf:"targets,omitempty"`
}

type BuildObservation struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	Actions *BuildActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Targets []BuildTargetsObservation `json:"targets,omitempty" tf:"targets,omitempty"`
}

type BuildParameters struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Actions *BuildActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Targets []BuildTargetsParameters `json:"targets" tf:"targets,omitempty"`
}

type BuildTargetsInitParameters struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Use Ant-style wildcard patterns to specify **existing and future** build names (i.e. artifact paths) in the build info repository (without a leading slash) that will be excluded from this permission target. Ant-style path expressions are supported (*, **, ?). For example, an `apache/**` pattern will exclude the "apache" build info from the permission.
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Use Ant-style wildcard patterns to specify **existing and future** build names (i.e. artifact paths) in the build info repository (without a leading slash) that will be included in this permission target. Ant-style path expressions are supported (*, **, ?). For example, an `apache/**` pattern will include the "apache" build info in the permission.
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Only `artifactory-build-info` is allowed for name. Specify build name as part of the `include_patterns` or `exclude_patterns`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type BuildTargetsObservation struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Use Ant-style wildcard patterns to specify **existing and future** build names (i.e. artifact paths) in the build info repository (without a leading slash) that will be excluded from this permission target. Ant-style path expressions are supported (*, **, ?). For example, an `apache/**` pattern will exclude the "apache" build info from the permission.
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Use Ant-style wildcard patterns to specify **existing and future** build names (i.e. artifact paths) in the build info repository (without a leading slash) that will be included in this permission target. Ant-style path expressions are supported (*, **, ?). For example, an `apache/**` pattern will include the "apache" build info in the permission.
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Only `artifactory-build-info` is allowed for name. Specify build name as part of the `include_patterns` or `exclude_patterns`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type BuildTargetsParameters struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Use Ant-style wildcard patterns to specify **existing and future** build names (i.e. artifact paths) in the build info repository (without a leading slash) that will be excluded from this permission target. Ant-style path expressions are supported (*, **, ?). For example, an `apache/**` pattern will exclude the "apache" build info from the permission.
	// +kubebuilder:validation:Optional
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Use Ant-style wildcard patterns to specify **existing and future** build names (i.e. artifact paths) in the build info repository (without a leading slash) that will be included in this permission target. Ant-style path expressions are supported (*, **, ?). For example, an `apache/**` pattern will include the "apache" build info in the permission.
	// +kubebuilder:validation:Optional
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Only `artifactory-build-info` is allowed for name. Specify build name as part of the `include_patterns` or `exclude_patterns`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type DestinationActionsGroupsInitParameters struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **EXECUTE**: Distributes Release Bundles according to their destination permissions.
	// **DELETE**: Deletes Release Bundles from the selected destinations.
	// **MANAGE**: Adds and deletes users who can distribute Release Bundles on assigned destinations.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type DestinationActionsGroupsObservation struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **EXECUTE**: Distributes Release Bundles according to their destination permissions.
	// **DELETE**: Deletes Release Bundles from the selected destinations.
	// **MANAGE**: Adds and deletes users who can distribute Release Bundles on assigned destinations.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type DestinationActionsGroupsParameters struct {

	// (String) Permission name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **EXECUTE**: Distributes Release Bundles according to their destination permissions.
	// **DELETE**: Deletes Release Bundles from the selected destinations.
	// **MANAGE**: Adds and deletes users who can distribute Release Bundles on assigned destinations.
	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type DestinationActionsInitParameters struct {

	// (Attributes Set) (see below for nested schema)
	Groups []DestinationActionsGroupsInitParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Users []DestinationActionsUsersInitParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type DestinationActionsObservation struct {

	// (Attributes Set) (see below for nested schema)
	Groups []DestinationActionsGroupsObservation `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Users []DestinationActionsUsersObservation `json:"users,omitempty" tf:"users,omitempty"`
}

type DestinationActionsParameters struct {

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Groups []DestinationActionsGroupsParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Users []DestinationActionsUsersParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type DestinationActionsUsersInitParameters struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **EXECUTE**: Distributes Release Bundles according to their destination permissions.
	// **DELETE**: Deletes Release Bundles from the selected destinations.
	// **MANAGE**: Adds and deletes users who can distribute Release Bundles on assigned destinations.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type DestinationActionsUsersObservation struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **EXECUTE**: Distributes Release Bundles according to their destination permissions.
	// **DELETE**: Deletes Release Bundles from the selected destinations.
	// **MANAGE**: Adds and deletes users who can distribute Release Bundles on assigned destinations.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type DestinationActionsUsersParameters struct {

	// (String) Permission name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **EXECUTE**: Distributes Release Bundles according to their destination permissions.
	// **DELETE**: Deletes Release Bundles from the selected destinations.
	// **MANAGE**: Adds and deletes users who can distribute Release Bundles on assigned destinations.
	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type DestinationInitParameters struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	Actions *DestinationActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Targets []DestinationTargetsInitParameters `json:"targets,omitempty" tf:"targets,omitempty"`
}

type DestinationObservation struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	Actions *DestinationActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Targets []DestinationTargetsObservation `json:"targets,omitempty" tf:"targets,omitempty"`
}

type DestinationParameters struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Actions *DestinationActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Targets []DestinationTargetsParameters `json:"targets" tf:"targets,omitempty"`
}

type DestinationTargetsInitParameters struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple wildcard patterns for existing and future JPD or city names. Ant-style path expressions are supported (*, **, ?). For example: `site_*` or `New*`
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple wildcard patterns for existing and future JPD or city names. Ant-style path expressions are supported (*, **, ?). For example: `site_*` or `New*`
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Specify destination name as name. Use `*` to include all destinations.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DestinationTargetsObservation struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple wildcard patterns for existing and future JPD or city names. Ant-style path expressions are supported (*, **, ?). For example: `site_*` or `New*`
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple wildcard patterns for existing and future JPD or city names. Ant-style path expressions are supported (*, **, ?). For example: `site_*` or `New*`
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Specify destination name as name. Use `*` to include all destinations.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DestinationTargetsParameters struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple wildcard patterns for existing and future JPD or city names. Ant-style path expressions are supported (*, **, ?). For example: `site_*` or `New*`
	// +kubebuilder:validation:Optional
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple wildcard patterns for existing and future JPD or city names. Ant-style path expressions are supported (*, **, ?). For example: `site_*` or `New*`
	// +kubebuilder:validation:Optional
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Specify destination name as name. Use `*` to include all destinations.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type GroupsInitParameters struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: Downloads artifacts and reads the metadata.
	// **ANNOTATE**: Annotates artifacts and folders with metadata and properties.
	// **WRITE**: Deploys artifacts & deploys to remote repository caches.
	// **DELETE**: Deletes or overwrites artifacts.
	// **SCAN**: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type GroupsObservation struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: Downloads artifacts and reads the metadata.
	// **ANNOTATE**: Annotates artifacts and folders with metadata and properties.
	// **WRITE**: Deploys artifacts & deploys to remote repository caches.
	// **DELETE**: Deletes or overwrites artifacts.
	// **SCAN**: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type GroupsParameters struct {

	// (String) Permission name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: Downloads artifacts and reads the metadata.
	// **ANNOTATE**: Annotates artifacts and folders with metadata and properties.
	// **WRITE**: Deploys artifacts & deploys to remote repository caches.
	// **DELETE**: Deletes or overwrites artifacts.
	// **SCAN**: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type PermissionInitParameters struct {

	// (Attributes) Defines the repositories to be used or excluded. (see below for nested schema)
	Artifact *ArtifactInitParameters `json:"artifact,omitempty" tf:"artifact,omitempty"`

	// (Attributes) Defines the builds to be used or excluded. (see below for nested schema)
	Build *BuildInitParameters `json:"build,omitempty" tf:"build,omitempty"`

	// (Attributes) Defines the destinations to be used or excluded. (see below for nested schema)
	Destination *DestinationInitParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// (String) Permission name
	// Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Attributes) Defines the pipeline sources to be used or excluded. (see below for nested schema)
	PipelineSource *PipelineSourceInitParameters `json:"pipelineSource,omitempty" tf:"pipeline_source,omitempty"`

	// (Attributes) Defines the release bundles to be used or excluded. (see below for nested schema)
	ReleaseBundle *ReleaseBundleInitParameters `json:"releaseBundle,omitempty" tf:"release_bundle,omitempty"`
}

type PermissionObservation struct {

	// (Attributes) Defines the repositories to be used or excluded. (see below for nested schema)
	Artifact *ArtifactObservation `json:"artifact,omitempty" tf:"artifact,omitempty"`

	// (Attributes) Defines the builds to be used or excluded. (see below for nested schema)
	Build *BuildObservation `json:"build,omitempty" tf:"build,omitempty"`

	// (Attributes) Defines the destinations to be used or excluded. (see below for nested schema)
	Destination *DestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Permission name
	// Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Attributes) Defines the pipeline sources to be used or excluded. (see below for nested schema)
	PipelineSource *PipelineSourceObservation `json:"pipelineSource,omitempty" tf:"pipeline_source,omitempty"`

	// (Attributes) Defines the release bundles to be used or excluded. (see below for nested schema)
	ReleaseBundle *ReleaseBundleObservation `json:"releaseBundle,omitempty" tf:"release_bundle,omitempty"`
}

type PermissionParameters struct {

	// (Attributes) Defines the repositories to be used or excluded. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Artifact *ArtifactParameters `json:"artifact,omitempty" tf:"artifact,omitempty"`

	// (Attributes) Defines the builds to be used or excluded. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Build *BuildParameters `json:"build,omitempty" tf:"build,omitempty"`

	// (Attributes) Defines the destinations to be used or excluded. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Destination *DestinationParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// (String) Permission name
	// Permission name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Attributes) Defines the pipeline sources to be used or excluded. (see below for nested schema)
	// +kubebuilder:validation:Optional
	PipelineSource *PipelineSourceParameters `json:"pipelineSource,omitempty" tf:"pipeline_source,omitempty"`

	// (Attributes) Defines the release bundles to be used or excluded. (see below for nested schema)
	// +kubebuilder:validation:Optional
	ReleaseBundle *ReleaseBundleParameters `json:"releaseBundle,omitempty" tf:"release_bundle,omitempty"`
}

type PipelineSourceActionsGroupsInitParameters struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: View the available pipeline sources.
	// **EXECUTE**: Manually trigger execution of steps.
	// **MANAGE**: Create and edit pipeline sources.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type PipelineSourceActionsGroupsObservation struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: View the available pipeline sources.
	// **EXECUTE**: Manually trigger execution of steps.
	// **MANAGE**: Create and edit pipeline sources.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type PipelineSourceActionsGroupsParameters struct {

	// (String) Permission name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: View the available pipeline sources.
	// **EXECUTE**: Manually trigger execution of steps.
	// **MANAGE**: Create and edit pipeline sources.
	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type PipelineSourceActionsInitParameters struct {

	// (Attributes Set) (see below for nested schema)
	Groups []PipelineSourceActionsGroupsInitParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Users []PipelineSourceActionsUsersInitParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type PipelineSourceActionsObservation struct {

	// (Attributes Set) (see below for nested schema)
	Groups []PipelineSourceActionsGroupsObservation `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Users []PipelineSourceActionsUsersObservation `json:"users,omitempty" tf:"users,omitempty"`
}

type PipelineSourceActionsParameters struct {

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Groups []PipelineSourceActionsGroupsParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Users []PipelineSourceActionsUsersParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type PipelineSourceActionsUsersInitParameters struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: View the available pipeline sources.
	// **EXECUTE**: Manually trigger execution of steps.
	// **MANAGE**: Create and edit pipeline sources.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type PipelineSourceActionsUsersObservation struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: View the available pipeline sources.
	// **EXECUTE**: Manually trigger execution of steps.
	// **MANAGE**: Create and edit pipeline sources.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type PipelineSourceActionsUsersParameters struct {

	// (String) Permission name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: View the available pipeline sources.
	// **EXECUTE**: Manually trigger execution of steps.
	// **MANAGE**: Create and edit pipeline sources.
	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type PipelineSourceInitParameters struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	Actions *PipelineSourceActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Targets []PipelineSourceTargetsInitParameters `json:"targets,omitempty" tf:"targets,omitempty"`
}

type PipelineSourceObservation struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	Actions *PipelineSourceActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Targets []PipelineSourceTargetsObservation `json:"targets,omitempty" tf:"targets,omitempty"`
}

type PipelineSourceParameters struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Actions *PipelineSourceActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Targets []PipelineSourceTargetsParameters `json:"targets" tf:"targets,omitempty"`
}

type PipelineSourceTargetsInitParameters struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Use Ant-style wildcard patterns to specify the full repository name of the **existing and future** pipeline sources that will be excluded from this permission. The pattern should have the following format: `{FULL_REPOSITORY_NAME_PATTERN}/**`. Ant-style path expressions are supported (*, **, ?). For example, the pattern `*/*test*/**` will exclude all repositories that contain the word "test" regardless of the repository owner.
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Use Ant-style wildcard patterns to specify the full repository name of the **existing and future** pipeline sources that will be included in this permission. The pattern should have the following format: `{FULL_REPOSITORY_NAME_PATTERN}/**`. Ant-style path expressions are supported (*, **, ?). For example, the pattern `*/*test*/**` will include all repositories that contain the word "test" regardless of the repository owner.
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Specify pipeline source name as name. Use `*` to include all pipeline sources.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PipelineSourceTargetsObservation struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Use Ant-style wildcard patterns to specify the full repository name of the **existing and future** pipeline sources that will be excluded from this permission. The pattern should have the following format: `{FULL_REPOSITORY_NAME_PATTERN}/**`. Ant-style path expressions are supported (*, **, ?). For example, the pattern `*/*test*/**` will exclude all repositories that contain the word "test" regardless of the repository owner.
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Use Ant-style wildcard patterns to specify the full repository name of the **existing and future** pipeline sources that will be included in this permission. The pattern should have the following format: `{FULL_REPOSITORY_NAME_PATTERN}/**`. Ant-style path expressions are supported (*, **, ?). For example, the pattern `*/*test*/**` will include all repositories that contain the word "test" regardless of the repository owner.
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Specify pipeline source name as name. Use `*` to include all pipeline sources.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PipelineSourceTargetsParameters struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Use Ant-style wildcard patterns to specify the full repository name of the **existing and future** pipeline sources that will be excluded from this permission. The pattern should have the following format: `{FULL_REPOSITORY_NAME_PATTERN}/**`. Ant-style path expressions are supported (*, **, ?). For example, the pattern `*/*test*/**` will exclude all repositories that contain the word "test" regardless of the repository owner.
	// +kubebuilder:validation:Optional
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Use Ant-style wildcard patterns to specify the full repository name of the **existing and future** pipeline sources that will be included in this permission. The pattern should have the following format: `{FULL_REPOSITORY_NAME_PATTERN}/**`. Ant-style path expressions are supported (*, **, ?). For example, the pattern `*/*test*/**` will include all repositories that contain the word "test" regardless of the repository owner.
	// +kubebuilder:validation:Optional
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Specify pipeline source name as name. Use `*` to include all pipeline sources.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type ReleaseBundleActionsGroupsInitParameters struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: Views and downloads Release Bundle artifacts from the relevant Release Bundle repository and reads the corresponding Release Bundles in the Distribution page.
	// **ANNOTATE**: Annotates Release Bundle artifacts and folder with metadata and properties.
	// **WRITE**: Creates Release Bundles.
	// **EXECUTE**: Allows users to promote Release Bundles v2 to a selected target environment and is a prerequisite for distributing Release Bundles (v1 & v2) to Distribution Edge nodes.
	// **DELETE**: Deletes Release Bundles.
	// **SCAN** Xray Metadata: Triggers Xray scans on Release Bundles. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing Release Bundle permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type ReleaseBundleActionsGroupsObservation struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: Views and downloads Release Bundle artifacts from the relevant Release Bundle repository and reads the corresponding Release Bundles in the Distribution page.
	// **ANNOTATE**: Annotates Release Bundle artifacts and folder with metadata and properties.
	// **WRITE**: Creates Release Bundles.
	// **EXECUTE**: Allows users to promote Release Bundles v2 to a selected target environment and is a prerequisite for distributing Release Bundles (v1 & v2) to Distribution Edge nodes.
	// **DELETE**: Deletes Release Bundles.
	// **SCAN** Xray Metadata: Triggers Xray scans on Release Bundles. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing Release Bundle permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type ReleaseBundleActionsGroupsParameters struct {

	// (String) Permission name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: Views and downloads Release Bundle artifacts from the relevant Release Bundle repository and reads the corresponding Release Bundles in the Distribution page.
	// **ANNOTATE**: Annotates Release Bundle artifacts and folder with metadata and properties.
	// **WRITE**: Creates Release Bundles.
	// **EXECUTE**: Allows users to promote Release Bundles v2 to a selected target environment and is a prerequisite for distributing Release Bundles (v1 & v2) to Distribution Edge nodes.
	// **DELETE**: Deletes Release Bundles.
	// **SCAN** Xray Metadata: Triggers Xray scans on Release Bundles. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing Release Bundle permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type ReleaseBundleActionsInitParameters struct {

	// (Attributes Set) (see below for nested schema)
	Groups []ReleaseBundleActionsGroupsInitParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Users []ReleaseBundleActionsUsersInitParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type ReleaseBundleActionsObservation struct {

	// (Attributes Set) (see below for nested schema)
	Groups []ReleaseBundleActionsGroupsObservation `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Users []ReleaseBundleActionsUsersObservation `json:"users,omitempty" tf:"users,omitempty"`
}

type ReleaseBundleActionsParameters struct {

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Groups []ReleaseBundleActionsGroupsParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Users []ReleaseBundleActionsUsersParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type ReleaseBundleActionsUsersInitParameters struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: Views and downloads Release Bundle artifacts from the relevant Release Bundle repository and reads the corresponding Release Bundles in the Distribution page.
	// **ANNOTATE**: Annotates Release Bundle artifacts and folder with metadata and properties.
	// **WRITE**: Creates Release Bundles.
	// **EXECUTE**: Allows users to promote Release Bundles v2 to a selected target environment and is a prerequisite for distributing Release Bundles (v1 & v2) to Distribution Edge nodes.
	// **DELETE**: Deletes Release Bundles.
	// **SCAN** Xray Metadata: Triggers Xray scans on Release Bundles. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing Release Bundle permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type ReleaseBundleActionsUsersObservation struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: Views and downloads Release Bundle artifacts from the relevant Release Bundle repository and reads the corresponding Release Bundles in the Distribution page.
	// **ANNOTATE**: Annotates Release Bundle artifacts and folder with metadata and properties.
	// **WRITE**: Creates Release Bundles.
	// **EXECUTE**: Allows users to promote Release Bundles v2 to a selected target environment and is a prerequisite for distributing Release Bundles (v1 & v2) to Distribution Edge nodes.
	// **DELETE**: Deletes Release Bundles.
	// **SCAN** Xray Metadata: Triggers Xray scans on Release Bundles. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing Release Bundle permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type ReleaseBundleActionsUsersParameters struct {

	// (String) Permission name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: Views and downloads Release Bundle artifacts from the relevant Release Bundle repository and reads the corresponding Release Bundles in the Distribution page.
	// **ANNOTATE**: Annotates Release Bundle artifacts and folder with metadata and properties.
	// **WRITE**: Creates Release Bundles.
	// **EXECUTE**: Allows users to promote Release Bundles v2 to a selected target environment and is a prerequisite for distributing Release Bundles (v1 & v2) to Distribution Edge nodes.
	// **DELETE**: Deletes Release Bundles.
	// **SCAN** Xray Metadata: Triggers Xray scans on Release Bundles. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing Release Bundle permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type ReleaseBundleInitParameters struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	Actions *ReleaseBundleActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Targets []ReleaseBundleTargetsInitParameters `json:"targets,omitempty" tf:"targets,omitempty"`
}

type ReleaseBundleObservation struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	Actions *ReleaseBundleActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Targets []ReleaseBundleTargetsObservation `json:"targets,omitempty" tf:"targets,omitempty"`
}

type ReleaseBundleParameters struct {

	// (Attributes) Either one of users or groups attribute must be set. (see below for nested schema)
	// +kubebuilder:validation:Optional
	Actions *ReleaseBundleActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Targets []ReleaseBundleTargetsParameters `json:"targets" tf:"targets,omitempty"`
}

type ReleaseBundleTargetsInitParameters struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple wildcard patterns for **existing and future** Release Bundle names. Ant-style path expressions are supported (*, **, ?). For example: `product_*/**`
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple wildcard patterns for **existing and future** Release Bundle names. Ant-style path expressions are supported (*, **, ?). For example: `product_*/**`
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Specify release bundle repository key as name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ReleaseBundleTargetsObservation struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple wildcard patterns for **existing and future** Release Bundle names. Ant-style path expressions are supported (*, **, ?). For example: `product_*/**`
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple wildcard patterns for **existing and future** Release Bundle names. Ant-style path expressions are supported (*, **, ?). For example: `product_*/**`
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Specify release bundle repository key as name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ReleaseBundleTargetsParameters struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple wildcard patterns for **existing and future** Release Bundle names. Ant-style path expressions are supported (*, **, ?). For example: `product_*/**`
	// +kubebuilder:validation:Optional
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple wildcard patterns for **existing and future** Release Bundle names. Ant-style path expressions are supported (*, **, ?). For example: `product_*/**`
	// +kubebuilder:validation:Optional
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Specify release bundle repository key as name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type TargetsInitParameters struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple comma separated wildcard patterns for **existing and future** repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, **, ?). For example: `org/apache/**`
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple comma separated wildcard patterns for **existing and future** repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, **, ?). For example: `org/apache/**`
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Specify repository key as name. Use `ANY LOCAL`, `ANY REMOTE`, or `ANY DISTRIBUTION` for any repository type.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TargetsObservation struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple comma separated wildcard patterns for **existing and future** repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, **, ?). For example: `org/apache/**`
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple comma separated wildcard patterns for **existing and future** repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, **, ?). For example: `org/apache/**`
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Specify repository key as name. Use `ANY LOCAL`, `ANY REMOTE`, or `ANY DISTRIBUTION` for any repository type.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TargetsParameters struct {

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple comma separated wildcard patterns for **existing and future** repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, **, ?). For example: `org/apache/**`
	// +kubebuilder:validation:Optional
	// +listType=set
	ExcludePatterns []*string `json:"excludePatterns,omitempty" tf:"exclude_patterns,omitempty"`

	// style path expressions are supported (*, **, ?). For example: org/apache/**
	// Simple comma separated wildcard patterns for **existing and future** repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, **, ?). For example: `org/apache/**`
	// +kubebuilder:validation:Optional
	// +listType=set
	IncludePatterns []*string `json:"includePatterns,omitempty" tf:"include_patterns,omitempty"`

	// (String) Permission name
	// Specify repository key as name. Use `ANY LOCAL`, `ANY REMOTE`, or `ANY DISTRIBUTION` for any repository type.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type UsersInitParameters struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: Downloads artifacts and reads the metadata.
	// **ANNOTATE**: Annotates artifacts and folders with metadata and properties.
	// **WRITE**: Deploys artifacts & deploys to remote repository caches.
	// **DELETE**: Deletes or overwrites artifacts.
	// **SCAN**: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type UsersObservation struct {

	// (String) Permission name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: Downloads artifacts and reads the metadata.
	// **ANNOTATE**: Annotates artifacts and folders with metadata and properties.
	// **WRITE**: Deploys artifacts & deploys to remote repository caches.
	// **DELETE**: Deletes or overwrites artifacts.
	// **SCAN**: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type UsersParameters struct {

	// (String) Permission name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) READ: Downloads artifacts and reads the metadata.
	// ANNOTATE: Annotates artifacts and folders with metadata and properties.
	// WRITE: Deploys artifacts & deploys to remote repository caches.
	// DELETE: Deletes or overwrites artifacts.
	// SCAN: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// MANAGE: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// **READ**: Downloads artifacts and reads the metadata.
	// **ANNOTATE**: Annotates artifacts and folders with metadata and properties.
	// **WRITE**: Deploys artifacts & deploys to remote repository caches.
	// **DELETE**: Deletes or overwrites artifacts.
	// **SCAN**: Triggers Xray scans on artifacts in repositories. Creates and deletes custom issues and license.
	// **MANAGE**: Allows changing the permission settings for other users in this permission target. It does not permit adding/removing resources to the permission target.
	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

// PermissionSpec defines the desired state of Permission
type PermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PermissionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PermissionInitParameters `json:"initProvider,omitempty"`
}

// PermissionStatus defines the observed state of Permission.
type PermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Permission is the Schema for the Permissions API. Provides a JFrog permission https://jfrog.com/help/r/jfrog-platform-administration-documentation/permissions resource to manage how users and groups access JFrog resources. This resource is applicable for the next-generation permissions model and fully backwards compatible with the legacy artifactory_permission_target resource in Artifactory provider.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,jfrog-platform}
type Permission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   PermissionSpec   `json:"spec"`
	Status PermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PermissionList contains a list of Permissions
type PermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Permission `json:"items"`
}

// Repository type metadata.
var (
	Permission_Kind             = "Permission"
	Permission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Permission_Kind}.String()
	Permission_KindAPIVersion   = Permission_Kind + "." + CRDGroupVersion.String()
	Permission_GroupVersionKind = CRDGroupVersion.WithKind(Permission_Kind)
)

func init() {
	SchemeBuilder.Register(&Permission{}, &PermissionList{})
}
