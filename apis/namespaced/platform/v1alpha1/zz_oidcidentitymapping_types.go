// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type OIDCIdentityMappingInitParameters struct {

	// (String) Claims JSON from the OIDC provider. Claims constitute the payload part of a JSON web token and represent a set of information exchanged between two parties. The JWT standard distinguishes between reserved claims, public claims, and private claims. In API Gateway context, both public claims and private claims are considered custom claims. For example, an ID token (which is always a JWT) can contain a claim called that asserts that the name of the user authenticating is "John Doe". In a JWT, a claim appears as a name/value pair where the name is always a string and the value can be any JSON value.
	// Claims JSON from the OIDC provider.hashicorp. Claims constitute the payload part of a JSON web token and represent a set of information exchanged between two parties. The JWT standard distinguishes between reserved claims, public claims, and private claims. In API Gateway context, both public claims and private claims are considered custom claims. For example, an ID token (which is always a JWT) can contain a claim called that asserts that the name of the user authenticating is "John Doe". In a JWT, a claim appears as a name/value pair where the name is always a string and the value can be any JSON value.
	ClaimsJSON *string `json:"claimsJson,omitempty" tf:"claims_json,omitempty"`

	// (String) Description of the OIDC mapping
	// Description of the OIDC mapping
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Name of the OIDC identity mapping
	// Name of the OIDC identity mapping
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) Priority of the identity mapping. The priority should be a number. The higher priority is set for the lower number. If you do not enter a value, the identity mapping is assigned the lowest priority. We recommend that you assign the highest priority (1) to the strongest permission gate. Set the lowest priority to the weakest permission for a logical and effective access control setup.
	// Priority of the identity mapping. The priority should be a number. The higher priority is set for the lower number. If you do not enter a value, the identity mapping is assigned the lowest priority. We recommend that you assign the highest priority (1) to the strongest permission gate. Set the lowest priority to the weakest permission for a logical and effective access control setup.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (String) If set, this Identity Mapping will be available in the scope of the given project (editable by platform admin and project admin). If not set, this Identity Mapping will be global and only editable by platform admin. Once set, the projectKey cannot be changed.
	// If set, this Identity Mapping will be available in the scope of the given project (editable by platform admin and project admin). If not set, this Identity Mapping will be global and only editable by platform admin. Once set, the projectKey cannot be changed.
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (String) Name of the OIDC configuration
	// Name of the OIDC configuration
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// (Attributes) Specifications of the token. In case of success, a token with the following details will be generated and passed to OIDC Provider. (see below for nested schema)
	TokenSpec *TokenSpecInitParameters `json:"tokenSpec,omitempty" tf:"token_spec,omitempty"`
}

type OIDCIdentityMappingObservation struct {

	// (String) Claims JSON from the OIDC provider. Claims constitute the payload part of a JSON web token and represent a set of information exchanged between two parties. The JWT standard distinguishes between reserved claims, public claims, and private claims. In API Gateway context, both public claims and private claims are considered custom claims. For example, an ID token (which is always a JWT) can contain a claim called that asserts that the name of the user authenticating is "John Doe". In a JWT, a claim appears as a name/value pair where the name is always a string and the value can be any JSON value.
	// Claims JSON from the OIDC provider.hashicorp. Claims constitute the payload part of a JSON web token and represent a set of information exchanged between two parties. The JWT standard distinguishes between reserved claims, public claims, and private claims. In API Gateway context, both public claims and private claims are considered custom claims. For example, an ID token (which is always a JWT) can contain a claim called that asserts that the name of the user authenticating is "John Doe". In a JWT, a claim appears as a name/value pair where the name is always a string and the value can be any JSON value.
	ClaimsJSON *string `json:"claimsJson,omitempty" tf:"claims_json,omitempty"`

	// (String) Description of the OIDC mapping
	// Description of the OIDC mapping
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the OIDC identity mapping
	// Name of the OIDC identity mapping
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) Priority of the identity mapping. The priority should be a number. The higher priority is set for the lower number. If you do not enter a value, the identity mapping is assigned the lowest priority. We recommend that you assign the highest priority (1) to the strongest permission gate. Set the lowest priority to the weakest permission for a logical and effective access control setup.
	// Priority of the identity mapping. The priority should be a number. The higher priority is set for the lower number. If you do not enter a value, the identity mapping is assigned the lowest priority. We recommend that you assign the highest priority (1) to the strongest permission gate. Set the lowest priority to the weakest permission for a logical and effective access control setup.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (String) If set, this Identity Mapping will be available in the scope of the given project (editable by platform admin and project admin). If not set, this Identity Mapping will be global and only editable by platform admin. Once set, the projectKey cannot be changed.
	// If set, this Identity Mapping will be available in the scope of the given project (editable by platform admin and project admin). If not set, this Identity Mapping will be global and only editable by platform admin. Once set, the projectKey cannot be changed.
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (String) Name of the OIDC configuration
	// Name of the OIDC configuration
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// (Attributes) Specifications of the token. In case of success, a token with the following details will be generated and passed to OIDC Provider. (see below for nested schema)
	TokenSpec *TokenSpecObservation `json:"tokenSpec,omitempty" tf:"token_spec,omitempty"`
}

type OIDCIdentityMappingParameters struct {

	// (String) Claims JSON from the OIDC provider. Claims constitute the payload part of a JSON web token and represent a set of information exchanged between two parties. The JWT standard distinguishes between reserved claims, public claims, and private claims. In API Gateway context, both public claims and private claims are considered custom claims. For example, an ID token (which is always a JWT) can contain a claim called that asserts that the name of the user authenticating is "John Doe". In a JWT, a claim appears as a name/value pair where the name is always a string and the value can be any JSON value.
	// Claims JSON from the OIDC provider.hashicorp. Claims constitute the payload part of a JSON web token and represent a set of information exchanged between two parties. The JWT standard distinguishes between reserved claims, public claims, and private claims. In API Gateway context, both public claims and private claims are considered custom claims. For example, an ID token (which is always a JWT) can contain a claim called that asserts that the name of the user authenticating is "John Doe". In a JWT, a claim appears as a name/value pair where the name is always a string and the value can be any JSON value.
	// +kubebuilder:validation:Optional
	ClaimsJSON *string `json:"claimsJson,omitempty" tf:"claims_json,omitempty"`

	// (String) Description of the OIDC mapping
	// Description of the OIDC mapping
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Name of the OIDC identity mapping
	// Name of the OIDC identity mapping
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) Priority of the identity mapping. The priority should be a number. The higher priority is set for the lower number. If you do not enter a value, the identity mapping is assigned the lowest priority. We recommend that you assign the highest priority (1) to the strongest permission gate. Set the lowest priority to the weakest permission for a logical and effective access control setup.
	// Priority of the identity mapping. The priority should be a number. The higher priority is set for the lower number. If you do not enter a value, the identity mapping is assigned the lowest priority. We recommend that you assign the highest priority (1) to the strongest permission gate. Set the lowest priority to the weakest permission for a logical and effective access control setup.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// (String) If set, this Identity Mapping will be available in the scope of the given project (editable by platform admin and project admin). If not set, this Identity Mapping will be global and only editable by platform admin. Once set, the projectKey cannot be changed.
	// If set, this Identity Mapping will be available in the scope of the given project (editable by platform admin and project admin). If not set, this Identity Mapping will be global and only editable by platform admin. Once set, the projectKey cannot be changed.
	// +kubebuilder:validation:Optional
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (String) Name of the OIDC configuration
	// Name of the OIDC configuration
	// +kubebuilder:validation:Optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// (Attributes) Specifications of the token. In case of success, a token with the following details will be generated and passed to OIDC Provider. (see below for nested schema)
	// +kubebuilder:validation:Optional
	TokenSpec *TokenSpecParameters `json:"tokenSpec,omitempty" tf:"token_spec,omitempty"`
}

type TokenSpecInitParameters struct {

	// (String) Sets of (space separated) the JFrog services to which the mapping applies. Default value is *@*, which applies to all services.
	// Sets of (space separated) the JFrog services to which the mapping applies. Default value is `*@*`, which applies to all services.
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// (Number) Token expiry time in seconds. Default value is 60.
	// Token expiry time in seconds. Default value is 60.
	ExpiresIn *float64 `json:"expiresIn,omitempty" tf:"expires_in,omitempty"`

	// (String) Provide a pattern which is used to map OIDC groups to Artifactory groups.
	// Provide a pattern which is used to map OIDC groups to Artifactory groups.
	GroupsPattern *string `json:"groupsPattern,omitempty" tf:"groups_pattern,omitempty"`

	// permissions/user, applied-permissions/admin, applied-permissions/roles:, or applied-permissions/groups:. Group names must be comma-separated, double quotes wrapped, e.g. applied-permissions/groups:\"readers\",\"my-group\", Role permissions are only applicable when in project scope and must be comma-separated, double quotes wrapped, e.g. applied-permissions:roles:<project-key>:"Developer","Viewer". username` is also required when setting role permission.
	// Scope of the token. Must start with `applied-permissions/user`, `applied-permissions/admin`, `applied-permissions/roles:`, or `applied-permissions/groups:`. Group names must be comma-separated, double quotes wrapped, e.g. `applied-permissions/groups:\"readers\",\"my-group\",` Role permissions are only applicable when in project scope and must be comma-separated, double quotes wrapped, e.g. `applied-permissions:roles:<project-key>:"Developer","Viewer". `username` is also required when setting role permission.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// permissions/groups. Must be set when scope is set to applied-permissions/roles.
	// User name of the OIDC user. Not applicable when `scope` is set to `applied-permissions/groups`. Must be set when `scope` is set to `applied-permissions/roles`.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (String) Provide a pattern which is used to map OIDC user to Artifactory user.
	// Provide a pattern which is used to map OIDC user to Artifactory user.
	UsernamePattern *string `json:"usernamePattern,omitempty" tf:"username_pattern,omitempty"`
}

type TokenSpecObservation struct {

	// (String) Sets of (space separated) the JFrog services to which the mapping applies. Default value is *@*, which applies to all services.
	// Sets of (space separated) the JFrog services to which the mapping applies. Default value is `*@*`, which applies to all services.
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// (Number) Token expiry time in seconds. Default value is 60.
	// Token expiry time in seconds. Default value is 60.
	ExpiresIn *float64 `json:"expiresIn,omitempty" tf:"expires_in,omitempty"`

	// (String) Provide a pattern which is used to map OIDC groups to Artifactory groups.
	// Provide a pattern which is used to map OIDC groups to Artifactory groups.
	GroupsPattern *string `json:"groupsPattern,omitempty" tf:"groups_pattern,omitempty"`

	// permissions/user, applied-permissions/admin, applied-permissions/roles:, or applied-permissions/groups:. Group names must be comma-separated, double quotes wrapped, e.g. applied-permissions/groups:\"readers\",\"my-group\", Role permissions are only applicable when in project scope and must be comma-separated, double quotes wrapped, e.g. applied-permissions:roles:<project-key>:"Developer","Viewer". username` is also required when setting role permission.
	// Scope of the token. Must start with `applied-permissions/user`, `applied-permissions/admin`, `applied-permissions/roles:`, or `applied-permissions/groups:`. Group names must be comma-separated, double quotes wrapped, e.g. `applied-permissions/groups:\"readers\",\"my-group\",` Role permissions are only applicable when in project scope and must be comma-separated, double quotes wrapped, e.g. `applied-permissions:roles:<project-key>:"Developer","Viewer". `username` is also required when setting role permission.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// permissions/groups. Must be set when scope is set to applied-permissions/roles.
	// User name of the OIDC user. Not applicable when `scope` is set to `applied-permissions/groups`. Must be set when `scope` is set to `applied-permissions/roles`.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (String) Provide a pattern which is used to map OIDC user to Artifactory user.
	// Provide a pattern which is used to map OIDC user to Artifactory user.
	UsernamePattern *string `json:"usernamePattern,omitempty" tf:"username_pattern,omitempty"`
}

type TokenSpecParameters struct {

	// (String) Sets of (space separated) the JFrog services to which the mapping applies. Default value is *@*, which applies to all services.
	// Sets of (space separated) the JFrog services to which the mapping applies. Default value is `*@*`, which applies to all services.
	// +kubebuilder:validation:Optional
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// (Number) Token expiry time in seconds. Default value is 60.
	// Token expiry time in seconds. Default value is 60.
	// +kubebuilder:validation:Optional
	ExpiresIn *float64 `json:"expiresIn,omitempty" tf:"expires_in,omitempty"`

	// (String) Provide a pattern which is used to map OIDC groups to Artifactory groups.
	// Provide a pattern which is used to map OIDC groups to Artifactory groups.
	// +kubebuilder:validation:Optional
	GroupsPattern *string `json:"groupsPattern,omitempty" tf:"groups_pattern,omitempty"`

	// permissions/user, applied-permissions/admin, applied-permissions/roles:, or applied-permissions/groups:. Group names must be comma-separated, double quotes wrapped, e.g. applied-permissions/groups:\"readers\",\"my-group\", Role permissions are only applicable when in project scope and must be comma-separated, double quotes wrapped, e.g. applied-permissions:roles:<project-key>:"Developer","Viewer". username` is also required when setting role permission.
	// Scope of the token. Must start with `applied-permissions/user`, `applied-permissions/admin`, `applied-permissions/roles:`, or `applied-permissions/groups:`. Group names must be comma-separated, double quotes wrapped, e.g. `applied-permissions/groups:\"readers\",\"my-group\",` Role permissions are only applicable when in project scope and must be comma-separated, double quotes wrapped, e.g. `applied-permissions:roles:<project-key>:"Developer","Viewer". `username` is also required when setting role permission.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// permissions/groups. Must be set when scope is set to applied-permissions/roles.
	// User name of the OIDC user. Not applicable when `scope` is set to `applied-permissions/groups`. Must be set when `scope` is set to `applied-permissions/roles`.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (String) Provide a pattern which is used to map OIDC user to Artifactory user.
	// Provide a pattern which is used to map OIDC user to Artifactory user.
	// +kubebuilder:validation:Optional
	UsernamePattern *string `json:"usernamePattern,omitempty" tf:"username_pattern,omitempty"`
}

// OIDCIdentityMappingSpec defines the desired state of OIDCIdentityMapping
type OIDCIdentityMappingSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            OIDCIdentityMappingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OIDCIdentityMappingInitParameters `json:"initProvider,omitempty"`
}

// OIDCIdentityMappingStatus defines the observed state of OIDCIdentityMapping.
type OIDCIdentityMappingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OIDCIdentityMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OIDCIdentityMapping is the Schema for the OIDCIdentityMappings API. Manage OIDC identity mapping for an OIDC configuration in JFrog platform. See the JFrog OIDC identity mappings documentation https://jfrog.com/help/r/jfrog-platform-administration-documentation/configure-identity-mappings for more information.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,jfrog-platform}
type OIDCIdentityMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.claimsJson) || (has(self.initProvider) && has(self.initProvider.claimsJson))",message="spec.forProvider.claimsJson is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.priority) || (has(self.initProvider) && has(self.initProvider.priority))",message="spec.forProvider.priority is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerName) || (has(self.initProvider) && has(self.initProvider.providerName))",message="spec.forProvider.providerName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tokenSpec) || (has(self.initProvider) && has(self.initProvider.tokenSpec))",message="spec.forProvider.tokenSpec is a required parameter"
	Spec   OIDCIdentityMappingSpec   `json:"spec"`
	Status OIDCIdentityMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OIDCIdentityMappingList contains a list of OIDCIdentityMappings
type OIDCIdentityMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OIDCIdentityMapping `json:"items"`
}

// Repository type metadata.
var (
	OIDCIdentityMapping_Kind             = "OIDCIdentityMapping"
	OIDCIdentityMapping_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OIDCIdentityMapping_Kind}.String()
	OIDCIdentityMapping_KindAPIVersion   = OIDCIdentityMapping_Kind + "." + CRDGroupVersion.String()
	OIDCIdentityMapping_GroupVersionKind = CRDGroupVersion.WithKind(OIDCIdentityMapping_Kind)
)

func init() {
	SchemeBuilder.Register(&OIDCIdentityMapping{}, &OIDCIdentityMappingList{})
}
