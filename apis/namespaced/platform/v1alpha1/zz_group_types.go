// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type GroupInitParameters struct {

	// (Boolean) Any users added to this group will automatically be assigned with admin privileges in the system.
	// Any users added to this group will automatically be assigned with admin privileges in the system.
	AdminPrivileges *bool `json:"adminPrivileges,omitempty" tf:"admin_privileges,omitempty"`

	// (Boolean) When this parameter is set, any new users defined in the system are automatically assigned to this group.
	// When this parameter is set, any new users defined in the system are automatically assigned to this group.
	AutoJoin *bool `json:"autoJoin,omitempty" tf:"auto_join,omitempty"`

	// (String) A description for the group.
	// A description for the group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) New external group ID used to configure the corresponding group in Azure AD.
	// New external group ID used to configure the corresponding group in Azure AD.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// (Set of String, Deprecated) List of users assigned to the group.
	// List of users assigned to the group.
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// (String) Name of the group.
	// Name of the group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) When set to true, this resource will ignore the members attributes and allow memberships to be managed by platform_group_members resource instead. Default value is true.
	// When set to `true`, this resource will ignore the `members` attributes and allow memberships to be managed by `platform_group_members` resource instead. Default value is `true`.
	UseGroupMembersResource *bool `json:"useGroupMembersResource,omitempty" tf:"use_group_members_resource,omitempty"`
}

type GroupObservation struct {

	// (Boolean) Any users added to this group will automatically be assigned with admin privileges in the system.
	// Any users added to this group will automatically be assigned with admin privileges in the system.
	AdminPrivileges *bool `json:"adminPrivileges,omitempty" tf:"admin_privileges,omitempty"`

	// (Boolean) When this parameter is set, any new users defined in the system are automatically assigned to this group.
	// When this parameter is set, any new users defined in the system are automatically assigned to this group.
	AutoJoin *bool `json:"autoJoin,omitempty" tf:"auto_join,omitempty"`

	// (String) A description for the group.
	// A description for the group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) New external group ID used to configure the corresponding group in Azure AD.
	// New external group ID used to configure the corresponding group in Azure AD.
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String, Deprecated) List of users assigned to the group.
	// List of users assigned to the group.
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// (String) Name of the group.
	// Name of the group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The realm for the group.
	// The realm for the group.
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// (String) The realm for the group.
	// The realm for the group.
	RealmAttributes *string `json:"realmAttributes,omitempty" tf:"realm_attributes,omitempty"`

	// (Boolean) When set to true, this resource will ignore the members attributes and allow memberships to be managed by platform_group_members resource instead. Default value is true.
	// When set to `true`, this resource will ignore the `members` attributes and allow memberships to be managed by `platform_group_members` resource instead. Default value is `true`.
	UseGroupMembersResource *bool `json:"useGroupMembersResource,omitempty" tf:"use_group_members_resource,omitempty"`
}

type GroupParameters struct {

	// (Boolean) Any users added to this group will automatically be assigned with admin privileges in the system.
	// Any users added to this group will automatically be assigned with admin privileges in the system.
	// +kubebuilder:validation:Optional
	AdminPrivileges *bool `json:"adminPrivileges,omitempty" tf:"admin_privileges,omitempty"`

	// (Boolean) When this parameter is set, any new users defined in the system are automatically assigned to this group.
	// When this parameter is set, any new users defined in the system are automatically assigned to this group.
	// +kubebuilder:validation:Optional
	AutoJoin *bool `json:"autoJoin,omitempty" tf:"auto_join,omitempty"`

	// (String) A description for the group.
	// A description for the group.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) New external group ID used to configure the corresponding group in Azure AD.
	// New external group ID used to configure the corresponding group in Azure AD.
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// (Set of String, Deprecated) List of users assigned to the group.
	// List of users assigned to the group.
	// +kubebuilder:validation:Optional
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// (String) Name of the group.
	// Name of the group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) When set to true, this resource will ignore the members attributes and allow memberships to be managed by platform_group_members resource instead. Default value is true.
	// When set to `true`, this resource will ignore the `members` attributes and allow memberships to be managed by `platform_group_members` resource instead. Default value is `true`.
	// +kubebuilder:validation:Optional
	UseGroupMembersResource *bool `json:"useGroupMembersResource,omitempty" tf:"use_group_members_resource,omitempty"`
}

// GroupSpec defines the desired state of Group
type GroupSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            GroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupInitParameters `json:"initProvider,omitempty"`
}

// GroupStatus defines the observed state of Group.
type GroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Group is the Schema for the Groups API. Provides a group resource to create and manage groups, and manages membership. A group represents a role and is used with RBAC (Role-Based Access Control) rules. See JFrog documentation https://jfrog.com/help/r/jfrog-platform-administration-documentation/create-and-edit-groups for more details.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,jfrog-platform}
type Group struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   GroupSpec   `json:"spec"`
	Status GroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupList contains a list of Groups
type GroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Group `json:"items"`
}

// Repository type metadata.
var (
	Group_Kind             = "Group"
	Group_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Group_Kind}.String()
	Group_KindAPIVersion   = Group_Kind + "." + CRDGroupVersion.String()
	Group_GroupVersionKind = CRDGroupVersion.WithKind(Group_Kind)
)

func init() {
	SchemeBuilder.Register(&Group{}, &GroupList{})
}
