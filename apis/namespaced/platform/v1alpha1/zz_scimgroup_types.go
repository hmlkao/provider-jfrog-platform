// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type MembersInitParameters struct {

	// (String)
	Display *string `json:"display,omitempty" tf:"display,omitempty"`

	// (String)
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MembersObservation struct {

	// (String)
	Display *string `json:"display,omitempty" tf:"display,omitempty"`

	// (String)
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MembersParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Display *string `json:"display" tf:"display,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type SCIMGroupInitParameters struct {

	// (String)
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Members []MembersInitParameters `json:"members,omitempty" tf:"members,omitempty"`
}

type SCIMGroupObservation struct {

	// (String)
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (String) Group ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Attributes Set) (see below for nested schema)
	Members []MembersObservation `json:"members,omitempty" tf:"members,omitempty"`

	// (Map of String)
	// +mapType=granular
	Meta map[string]*string `json:"meta,omitempty" tf:"meta,omitempty"`
}

type SCIMGroupParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Attributes Set) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Members []MembersParameters `json:"members,omitempty" tf:"members,omitempty"`
}

// SCIMGroupSpec defines the desired state of SCIMGroup
type SCIMGroupSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            SCIMGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SCIMGroupInitParameters `json:"initProvider,omitempty"`
}

// SCIMGroupStatus defines the observed state of SCIMGroup.
type SCIMGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SCIMGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SCIMGroup is the Schema for the SCIMGroups API. Provides a JFrog SCIM Group https://jfrog.com/help/r/jfrog-platform-administration-documentation/scim resource to manage groups with the SCIM protocol.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,jfrog-platform}
type SCIMGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.members) || (has(self.initProvider) && has(self.initProvider.members))",message="spec.forProvider.members is a required parameter"
	Spec   SCIMGroupSpec   `json:"spec"`
	Status SCIMGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SCIMGroupList contains a list of SCIMGroups
type SCIMGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SCIMGroup `json:"items"`
}

// Repository type metadata.
var (
	SCIMGroup_Kind             = "SCIMGroup"
	SCIMGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SCIMGroup_Kind}.String()
	SCIMGroup_KindAPIVersion   = SCIMGroup_Kind + "." + CRDGroupVersion.String()
	SCIMGroup_GroupVersionKind = CRDGroupVersion.WithKind(SCIMGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&SCIMGroup{}, &SCIMGroupList{})
}
