// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ReverseProxyInitParameters struct {

	// (String) Docker access method. The default value is SUBDOMAIN. Supported values: SUBDOMAIN, REPOPATHPREFIX, PORTPERREPO.
	// Docker access method. The default value is SUBDOMAIN. Supported values: SUBDOMAIN, REPOPATHPREFIX, PORTPERREPO.
	DockerReverseProxyMethod *string `json:"dockerReverseProxyMethod,omitempty" tf:"docker_reverse_proxy_method,omitempty"`

	// (Number) The port for access via HTTP. The default value is 80. Only settable when server_provider is set to NIGNIX or APACHE
	// The port for access via HTTP. The default value is 80. Only settable when `server_provider` is set to `NIGNIX` or `APACHE`
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// (Number) The port for access via HTTPS. The default value is 443. Only settable when use_https is set to true
	// The port for access via HTTPS. The default value is 443. Only settable when `use_https` is set to `true`
	HTTPSPort *float64 `json:"httpsPort,omitempty" tf:"https_port,omitempty"`

	// (String) The internal server name for Artifactory which will be used by the web server to access the Artifactory machine. If the web server is installed on the same machine as Artifactory you can use localhost, otherwise use the IP or hostname. Must be set when server_provider is set to NIGNIX or APACHE
	// The internal server name for Artifactory which will be used by the web server to access the Artifactory machine. If the web server is installed on the same machine as Artifactory you can use localhost, otherwise use the IP or hostname. Must be set when `server_provider` is set to `NIGNIX` or `APACHE`
	InternalHostname *string `json:"internalHostname,omitempty" tf:"internal_hostname,omitempty"`

	// (String) The server name that will be used to access Artifactory. Should be correlated with the base URL value. Must be set when server_provider is set to NIGNIX or APACHE
	// The server name that will be used to access Artifactory. Should be correlated with the base URL value. Must be set when `server_provider` is set to `NIGNIX` or `APACHE`
	PublicServerName *string `json:"publicServerName,omitempty" tf:"public_server_name,omitempty"`

	// (String) The full path of the certificate file on the web server, e.g. /etc/ssl/certs/myserver.crt. Must be set when use_https is set to true
	// The full path of the certificate file on the web server, e.g. `/etc/ssl/certs/myserver.crt`. Must be set when `use_https` is set to `true`
	SSLCertificatePath *string `json:"sslCertificatePath,omitempty" tf:"ssl_certificate_path,omitempty"`

	// (String) The full path of the key file on the web server, e.g. /etc/ssl/private/myserver.key. Must be set when use_https is set to true
	// The full path of the key file on the web server, e.g. `/etc/ssl/private/myserver.key`. Must be set when `use_https` is set to `true`
	SSLKeyPath *string `json:"sslKeyPath,omitempty" tf:"ssl_key_path,omitempty"`

	// (String) Set the server provider type. Supported values: DIRECT, NGINX, APACHE.
	// Set the server provider type. Supported values: DIRECT, NGINX, APACHE.
	ServerProvider *string `json:"serverProvider,omitempty" tf:"server_provider,omitempty"`

	// (Boolean) When set, Artifactory will be accessible via HTTPS at the corresponding port that is set. Only settable when server_provider is set to NIGNIX or APACHE
	// When set, Artifactory will be accessible via HTTPS at the corresponding port that is set. Only settable when `server_provider` is set to `NIGNIX` or `APACHE`
	UseHTTPS *bool `json:"useHttps,omitempty" tf:"use_https,omitempty"`
}

type ReverseProxyObservation struct {

	// (String) Docker access method. The default value is SUBDOMAIN. Supported values: SUBDOMAIN, REPOPATHPREFIX, PORTPERREPO.
	// Docker access method. The default value is SUBDOMAIN. Supported values: SUBDOMAIN, REPOPATHPREFIX, PORTPERREPO.
	DockerReverseProxyMethod *string `json:"dockerReverseProxyMethod,omitempty" tf:"docker_reverse_proxy_method,omitempty"`

	// (Number) The port for access via HTTP. The default value is 80. Only settable when server_provider is set to NIGNIX or APACHE
	// The port for access via HTTP. The default value is 80. Only settable when `server_provider` is set to `NIGNIX` or `APACHE`
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// (Number) The port for access via HTTPS. The default value is 443. Only settable when use_https is set to true
	// The port for access via HTTPS. The default value is 443. Only settable when `use_https` is set to `true`
	HTTPSPort *float64 `json:"httpsPort,omitempty" tf:"https_port,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The internal server name for Artifactory which will be used by the web server to access the Artifactory machine. If the web server is installed on the same machine as Artifactory you can use localhost, otherwise use the IP or hostname. Must be set when server_provider is set to NIGNIX or APACHE
	// The internal server name for Artifactory which will be used by the web server to access the Artifactory machine. If the web server is installed on the same machine as Artifactory you can use localhost, otherwise use the IP or hostname. Must be set when `server_provider` is set to `NIGNIX` or `APACHE`
	InternalHostname *string `json:"internalHostname,omitempty" tf:"internal_hostname,omitempty"`

	// (String) The server name that will be used to access Artifactory. Should be correlated with the base URL value. Must be set when server_provider is set to NIGNIX or APACHE
	// The server name that will be used to access Artifactory. Should be correlated with the base URL value. Must be set when `server_provider` is set to `NIGNIX` or `APACHE`
	PublicServerName *string `json:"publicServerName,omitempty" tf:"public_server_name,omitempty"`

	// (String) The full path of the certificate file on the web server, e.g. /etc/ssl/certs/myserver.crt. Must be set when use_https is set to true
	// The full path of the certificate file on the web server, e.g. `/etc/ssl/certs/myserver.crt`. Must be set when `use_https` is set to `true`
	SSLCertificatePath *string `json:"sslCertificatePath,omitempty" tf:"ssl_certificate_path,omitempty"`

	// (String) The full path of the key file on the web server, e.g. /etc/ssl/private/myserver.key. Must be set when use_https is set to true
	// The full path of the key file on the web server, e.g. `/etc/ssl/private/myserver.key`. Must be set when `use_https` is set to `true`
	SSLKeyPath *string `json:"sslKeyPath,omitempty" tf:"ssl_key_path,omitempty"`

	// (String) Set the server provider type. Supported values: DIRECT, NGINX, APACHE.
	// Set the server provider type. Supported values: DIRECT, NGINX, APACHE.
	ServerProvider *string `json:"serverProvider,omitempty" tf:"server_provider,omitempty"`

	// (Boolean) When set, Artifactory will be accessible via HTTPS at the corresponding port that is set. Only settable when server_provider is set to NIGNIX or APACHE
	// When set, Artifactory will be accessible via HTTPS at the corresponding port that is set. Only settable when `server_provider` is set to `NIGNIX` or `APACHE`
	UseHTTPS *bool `json:"useHttps,omitempty" tf:"use_https,omitempty"`
}

type ReverseProxyParameters struct {

	// (String) Docker access method. The default value is SUBDOMAIN. Supported values: SUBDOMAIN, REPOPATHPREFIX, PORTPERREPO.
	// Docker access method. The default value is SUBDOMAIN. Supported values: SUBDOMAIN, REPOPATHPREFIX, PORTPERREPO.
	// +kubebuilder:validation:Optional
	DockerReverseProxyMethod *string `json:"dockerReverseProxyMethod,omitempty" tf:"docker_reverse_proxy_method,omitempty"`

	// (Number) The port for access via HTTP. The default value is 80. Only settable when server_provider is set to NIGNIX or APACHE
	// The port for access via HTTP. The default value is 80. Only settable when `server_provider` is set to `NIGNIX` or `APACHE`
	// +kubebuilder:validation:Optional
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// (Number) The port for access via HTTPS. The default value is 443. Only settable when use_https is set to true
	// The port for access via HTTPS. The default value is 443. Only settable when `use_https` is set to `true`
	// +kubebuilder:validation:Optional
	HTTPSPort *float64 `json:"httpsPort,omitempty" tf:"https_port,omitempty"`

	// (String) The internal server name for Artifactory which will be used by the web server to access the Artifactory machine. If the web server is installed on the same machine as Artifactory you can use localhost, otherwise use the IP or hostname. Must be set when server_provider is set to NIGNIX or APACHE
	// The internal server name for Artifactory which will be used by the web server to access the Artifactory machine. If the web server is installed on the same machine as Artifactory you can use localhost, otherwise use the IP or hostname. Must be set when `server_provider` is set to `NIGNIX` or `APACHE`
	// +kubebuilder:validation:Optional
	InternalHostname *string `json:"internalHostname,omitempty" tf:"internal_hostname,omitempty"`

	// (String) The server name that will be used to access Artifactory. Should be correlated with the base URL value. Must be set when server_provider is set to NIGNIX or APACHE
	// The server name that will be used to access Artifactory. Should be correlated with the base URL value. Must be set when `server_provider` is set to `NIGNIX` or `APACHE`
	// +kubebuilder:validation:Optional
	PublicServerName *string `json:"publicServerName,omitempty" tf:"public_server_name,omitempty"`

	// (String) The full path of the certificate file on the web server, e.g. /etc/ssl/certs/myserver.crt. Must be set when use_https is set to true
	// The full path of the certificate file on the web server, e.g. `/etc/ssl/certs/myserver.crt`. Must be set when `use_https` is set to `true`
	// +kubebuilder:validation:Optional
	SSLCertificatePath *string `json:"sslCertificatePath,omitempty" tf:"ssl_certificate_path,omitempty"`

	// (String) The full path of the key file on the web server, e.g. /etc/ssl/private/myserver.key. Must be set when use_https is set to true
	// The full path of the key file on the web server, e.g. `/etc/ssl/private/myserver.key`. Must be set when `use_https` is set to `true`
	// +kubebuilder:validation:Optional
	SSLKeyPath *string `json:"sslKeyPath,omitempty" tf:"ssl_key_path,omitempty"`

	// (String) Set the server provider type. Supported values: DIRECT, NGINX, APACHE.
	// Set the server provider type. Supported values: DIRECT, NGINX, APACHE.
	// +kubebuilder:validation:Optional
	ServerProvider *string `json:"serverProvider,omitempty" tf:"server_provider,omitempty"`

	// (Boolean) When set, Artifactory will be accessible via HTTPS at the corresponding port that is set. Only settable when server_provider is set to NIGNIX or APACHE
	// When set, Artifactory will be accessible via HTTPS at the corresponding port that is set. Only settable when `server_provider` is set to `NIGNIX` or `APACHE`
	// +kubebuilder:validation:Optional
	UseHTTPS *bool `json:"useHttps,omitempty" tf:"use_https,omitempty"`
}

// ReverseProxySpec defines the desired state of ReverseProxy
type ReverseProxySpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ReverseProxyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ReverseProxyInitParameters `json:"initProvider,omitempty"`
}

// ReverseProxyStatus defines the observed state of ReverseProxy.
type ReverseProxyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReverseProxyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ReverseProxy is the Schema for the ReverseProxys API. Provides a JFrog Reverse Proxy https://jfrog.com/help/r/jfrog-artifactory-documentation/reverse-proxy-settings resource. ~>Only available for self-hosted instances.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,jfrog-platform}
type ReverseProxy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serverProvider) || (has(self.initProvider) && has(self.initProvider.serverProvider))",message="spec.forProvider.serverProvider is a required parameter"
	Spec   ReverseProxySpec   `json:"spec"`
	Status ReverseProxyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReverseProxyList contains a list of ReverseProxys
type ReverseProxyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReverseProxy `json:"items"`
}

// Repository type metadata.
var (
	ReverseProxy_Kind             = "ReverseProxy"
	ReverseProxy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ReverseProxy_Kind}.String()
	ReverseProxy_KindAPIVersion   = ReverseProxy_Kind + "." + CRDGroupVersion.String()
	ReverseProxy_GroupVersionKind = CRDGroupVersion.WithKind(ReverseProxy_Kind)
)

func init() {
	SchemeBuilder.Register(&ReverseProxy{}, &ReverseProxyList{})
}
